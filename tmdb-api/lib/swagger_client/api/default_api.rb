# frozen_string_literal: true

# #TMDB API
#
# No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
#
# OpenAPI spec version: 3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 3.0.54

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add Favorite
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [AccountIdFavoriteBody] :body
    # @option opts [] :session_id
    # @return [InlineResponse20030]
    def account_add_favorite(account_id, opts = {})
      data, _status_code, _headers = account_add_favorite_with_http_info(account_id, opts)
      data
    end

    # Add Favorite
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [AccountIdFavoriteBody] :body
    # @option opts [] :session_id
    # @return [Array<(InlineResponse20030, Integer, Hash)>] InlineResponse20030 data, response status code and response headers
    def account_add_favorite_with_http_info(account_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.account_add_favorite ...' if @api_client.config.debugging
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        raise ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.account_add_favorite"
      end

      # resource path
      local_var_path = '/3/account/{account_id}/favorite'.sub('{account_id}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InlineResponse20030'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_add_favorite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Add To Watchlist
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [AccountIdWatchlistBody] :body
    # @option opts [] :session_id
    # @return [InlineResponse20030]
    def account_add_to_watchlist(account_id, opts = {})
      data, _status_code, _headers = account_add_to_watchlist_with_http_info(account_id, opts)
      data
    end

    # Add To Watchlist
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [AccountIdWatchlistBody] :body
    # @option opts [] :session_id
    # @return [Array<(InlineResponse20030, Integer, Hash)>] InlineResponse20030 data, response status code and response headers
    def account_add_to_watchlist_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_add_to_watchlist ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'account_id' when calling DefaultApi.account_add_to_watchlist"
      end

      # resource path
      local_var_path = '/3/account/{account_id}/watchlist'.sub('{account_id}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InlineResponse20030'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_add_to_watchlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :session_id
    # @return [InlineResponse20082]
    def account_details(account_id, opts = {})
      data, _status_code, _headers = account_details_with_http_info(account_id, opts)
      data
    end

    # Details
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :session_id
    # @return [Array<(InlineResponse20082, Integer, Hash)>] InlineResponse20082 data, response status code and response headers
    def account_details_with_http_info(account_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.account_details ...' if @api_client.config.debugging
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        raise ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.account_details"
      end

      # resource path
      local_var_path = '/3/account/{account_id}'.sub('{account_id}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20082'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Favorite TV
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :session_id
    # @option opts [] :sort_by  (default to created_at.asc)
    # @return [InlineResponse20085]
    def account_favorite_tv(account_id, opts = {})
      data, _status_code, _headers = account_favorite_tv_with_http_info(account_id, opts)
      data
    end

    # Favorite TV
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :session_id
    # @option opts [] :sort_by
    # @return [Array<(InlineResponse20085, Integer, Hash)>] InlineResponse20085 data, response status code and response headers
    def account_favorite_tv_with_http_info(account_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.account_favorite_tv ...' if @api_client.config.debugging
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        raise ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.account_favorite_tv"
      end

      # resource path
      local_var_path = '/3/account/{account_id}/favorite/tv'.sub('{account_id}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?
      query_params[:sort_by] = opts[:sort_by] unless opts[:sort_by].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20085'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_favorite_tv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Favorite Movies
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :session_id
    # @option opts [] :sort_by  (default to created_at.asc)
    # @return [InlineResponse20084]
    def account_get_favorites(account_id, opts = {})
      data, _status_code, _headers = account_get_favorites_with_http_info(account_id, opts)
      data
    end

    # Favorite Movies
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :session_id
    # @option opts [] :sort_by
    # @return [Array<(InlineResponse20084, Integer, Hash)>] InlineResponse20084 data, response status code and response headers
    def account_get_favorites_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_get_favorites ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        raise ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.account_get_favorites"
      end

      # resource path
      local_var_path = '/3/account/{account_id}/favorite/movies'.sub('{account_id}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?
      query_params[:sort_by] = opts[:sort_by] unless opts[:sort_by].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20084'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_get_favorites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Lists
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @option opts [] :session_id
    # @return [InlineResponse20083]
    def account_lists(account_id, opts = {})
      data, _status_code, _headers = account_lists_with_http_info(account_id, opts)
      data
    end

    # Lists
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :page
    # @option opts [] :session_id
    # @return [Array<(InlineResponse20083, Integer, Hash)>] InlineResponse20083 data, response status code and response headers
    def account_lists_with_http_info(account_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.account_lists ...' if @api_client.config.debugging
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        raise ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.account_lists"
      end

      # resource path
      local_var_path = '/3/account/{account_id}/lists'.sub('{account_id}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20083'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Rated Movies
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :session_id
    # @option opts [] :sort_by  (default to created_at.asc)
    # @return [InlineResponse20086]
    def account_rated_movies(account_id, opts = {})
      data, _status_code, _headers = account_rated_movies_with_http_info(account_id, opts)
      data
    end

    # Rated Movies
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :session_id
    # @option opts [] :sort_by
    # @return [Array<(InlineResponse20086, Integer, Hash)>] InlineResponse20086 data, response status code and response headers
    def account_rated_movies_with_http_info(account_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.account_rated_movies ...' if @api_client.config.debugging
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        raise ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.account_rated_movies"
      end

      # resource path
      local_var_path = '/3/account/{account_id}/rated/movies'.sub('{account_id}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?
      query_params[:sort_by] = opts[:sort_by] unless opts[:sort_by].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20086'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_rated_movies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Rated TV
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :session_id
    # @option opts [] :sort_by  (default to created_at.asc)
    # @return [InlineResponse20087]
    def account_rated_tv(account_id, opts = {})
      data, _status_code, _headers = account_rated_tv_with_http_info(account_id, opts)
      data
    end

    # Rated TV
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :session_id
    # @option opts [] :sort_by
    # @return [Array<(InlineResponse20087, Integer, Hash)>] InlineResponse20087 data, response status code and response headers
    def account_rated_tv_with_http_info(account_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.account_rated_tv ...' if @api_client.config.debugging
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        raise ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.account_rated_tv"
      end

      # resource path
      local_var_path = '/3/account/{account_id}/rated/tv'.sub('{account_id}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?
      query_params[:sort_by] = opts[:sort_by] unless opts[:sort_by].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20087'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_rated_tv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Rated TV Episodes
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :session_id
    # @option opts [] :sort_by  (default to created_at.asc)
    # @return [InlineResponse20088]
    def account_rated_tv_episodes(account_id, opts = {})
      data, _status_code, _headers = account_rated_tv_episodes_with_http_info(account_id, opts)
      data
    end

    # Rated TV Episodes
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :session_id
    # @option opts [] :sort_by
    # @return [Array<(InlineResponse20088, Integer, Hash)>] InlineResponse20088 data, response status code and response headers
    def account_rated_tv_episodes_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_rated_tv_episodes ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'account_id' when calling DefaultApi.account_rated_tv_episodes"
      end

      # resource path
      local_var_path = '/3/account/{account_id}/rated/tv/episodes'.sub('{account_id}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?
      query_params[:sort_by] = opts[:sort_by] unless opts[:sort_by].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20088'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_rated_tv_episodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Watchlist Movies
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :session_id
    # @option opts [] :sort_by  (default to created_at.asc)
    # @return [InlineResponse20089]
    def account_watchlist_movies(account_id, opts = {})
      data, _status_code, _headers = account_watchlist_movies_with_http_info(account_id, opts)
      data
    end

    # Watchlist Movies
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :session_id
    # @option opts [] :sort_by
    # @return [Array<(InlineResponse20089, Integer, Hash)>] InlineResponse20089 data, response status code and response headers
    def account_watchlist_movies_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_watchlist_movies ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'account_id' when calling DefaultApi.account_watchlist_movies"
      end

      # resource path
      local_var_path = '/3/account/{account_id}/watchlist/movies'.sub('{account_id}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?
      query_params[:sort_by] = opts[:sort_by] unless opts[:sort_by].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20089'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_watchlist_movies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Watchlist TV
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :session_id
    # @option opts [] :sort_by  (default to created_at.asc)
    # @return [InlineResponse20090]
    def account_watchlist_tv(account_id, opts = {})
      data, _status_code, _headers = account_watchlist_tv_with_http_info(account_id, opts)
      data
    end

    # Watchlist TV
    # @param account_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :session_id
    # @option opts [] :sort_by
    # @return [Array<(InlineResponse20090, Integer, Hash)>] InlineResponse20090 data, response status code and response headers
    def account_watchlist_tv_with_http_info(account_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.account_watchlist_tv ...' if @api_client.config.debugging
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        raise ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.account_watchlist_tv"
      end

      # resource path
      local_var_path = '/3/account/{account_id}/watchlist/tv'.sub('{account_id}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?
      query_params[:sort_by] = opts[:sort_by] unless opts[:sort_by].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20090'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_watchlist_tv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Images
    # Get the TV network logos by id.
    # @param network_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200118]
    def alternative_names_copy(network_id, opts = {})
      data, _status_code, _headers = alternative_names_copy_with_http_info(network_id, opts)
      data
    end

    # Images
    # Get the TV network logos by id.
    # @param network_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200118, Integer, Hash)>] InlineResponse200118 data, response status code and response headers
    def alternative_names_copy_with_http_info(network_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.alternative_names_copy ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'network_id' when calling DefaultApi.alternative_names_copy"
      end

      # resource path
      local_var_path = '/3/network/{network_id}/images'.sub('{network_id}', network_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200118'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#alternative_names_copy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create Guest Session
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20032]
    def authentication_create_guest_session(opts = {})
      data, _status_code, _headers = authentication_create_guest_session_with_http_info(opts)
      data
    end

    # Create Guest Session
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20032, Integer, Hash)>] InlineResponse20032 data, response status code and response headers
    def authentication_create_guest_session_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.authentication_create_guest_session ...'
      end
      # resource path
      local_var_path = '/3/authentication/guest_session/new'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20032'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#authentication_create_guest_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create Request Token
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20033]
    def authentication_create_request_token(opts = {})
      data, _status_code, _headers = authentication_create_request_token_with_http_info(opts)
      data
    end

    # Create Request Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20033, Integer, Hash)>] InlineResponse20033 data, response status code and response headers
    def authentication_create_request_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.authentication_create_request_token ...'
      end
      # resource path
      local_var_path = '/3/authentication/token/new'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20033'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#authentication_create_request_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create Session
    # @param [Hash] opts the optional parameters
    # @option opts [SessionNewBody] :body
    # @return [InlineResponse20034]
    def authentication_create_session(opts = {})
      data, _status_code, _headers = authentication_create_session_with_http_info(opts)
      data
    end

    # Create Session
    # @param [Hash] opts the optional parameters
    # @option opts [SessionNewBody] :body
    # @return [Array<(InlineResponse20034, Integer, Hash)>] InlineResponse20034 data, response status code and response headers
    def authentication_create_session_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.authentication_create_session ...'
      end
      # resource path
      local_var_path = '/3/authentication/session/new'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InlineResponse20034'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#authentication_create_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create Session (with login)
    # This method allows an application to validate a request token by entering a username and password.
    # @param [Hash] opts the optional parameters
    # @option opts [TokenValidateWithLoginBody] :body
    # @return [InlineResponse200122]
    def authentication_create_session_from_login(opts = {})
      data, _status_code, _headers = authentication_create_session_from_login_with_http_info(opts)
      data
    end

    # Create Session (with login)
    # This method allows an application to validate a request token by entering a username and password.
    # @param [Hash] opts the optional parameters
    # @option opts [TokenValidateWithLoginBody] :body
    # @return [Array<(InlineResponse200122, Integer, Hash)>] InlineResponse200122 data, response status code and response headers
    def authentication_create_session_from_login_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.authentication_create_session_from_login ...'
      end
      # resource path
      local_var_path = '/3/authentication/token/validate_with_login'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InlineResponse200122'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#authentication_create_session_from_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create Session (from v4 token)
    # @param [Hash] opts the optional parameters
    # @option opts [Convert4Body] :body
    # @return [InlineResponse20035]
    def authentication_create_session_from_v4_token(opts = {})
      data, _status_code, _headers = authentication_create_session_from_v4_token_with_http_info(opts)
      data
    end

    # Create Session (from v4 token)
    # @param [Hash] opts the optional parameters
    # @option opts [Convert4Body] :body
    # @return [Array<(InlineResponse20035, Integer, Hash)>] InlineResponse20035 data, response status code and response headers
    def authentication_create_session_from_v4_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.authentication_create_session_from_v4_token ...'
      end
      # resource path
      local_var_path = '/3/authentication/session/convert/4'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InlineResponse20035'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#authentication_create_session_from_v4_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Session
    # @param [Hash] opts the optional parameters
    # @option opts [AuthenticationSessionBody] :body
    # @return [InlineResponse20036]
    def authentication_delete_session(opts = {})
      data, _status_code, _headers = authentication_delete_session_with_http_info(opts)
      data
    end

    # Delete Session
    # @param [Hash] opts the optional parameters
    # @option opts [AuthenticationSessionBody] :body
    # @return [Array<(InlineResponse20036, Integer, Hash)>] InlineResponse20036 data, response status code and response headers
    def authentication_delete_session_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.authentication_delete_session ...'
      end
      # resource path
      local_var_path = '/3/authentication/session'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InlineResponse20036'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#authentication_delete_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Validate Key
    # Test your API Key to see if it's valid.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200120]
    def authentication_validate_key(opts = {})
      data, _status_code, _headers = authentication_validate_key_with_http_info(opts)
      data
    end

    # Validate Key
    # Test your API Key to see if it&#x27;s valid.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200120, Integer, Hash)>] InlineResponse200120 data, response status code and response headers
    def authentication_validate_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.authentication_validate_key ...'
      end
      # resource path
      local_var_path = '/3/authentication'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200120'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#authentication_validate_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Movie Certifications
    # Get an up to date list of the officially supported movie certifications on TMDB.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20091]
    def certification_movie_list(opts = {})
      data, _status_code, _headers = certification_movie_list_with_http_info(opts)
      data
    end

    # Movie Certifications
    # Get an up to date list of the officially supported movie certifications on TMDB.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20091, Integer, Hash)>] InlineResponse20091 data, response status code and response headers
    def certification_movie_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.certification_movie_list ...'
      end
      # resource path
      local_var_path = '/3/certification/movie/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20091'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#certification_movie_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # TV Certifications
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20092]
    def certifications_tv_list(opts = {})
      data, _status_code, _headers = certifications_tv_list_with_http_info(opts)
      data
    end

    # TV Certifications
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20092, Integer, Hash)>] InlineResponse20092 data, response status code and response headers
    def certifications_tv_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.certifications_tv_list ...'
      end
      # resource path
      local_var_path = '/3/certification/tv/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20092'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#certifications_tv_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Movie List
    # Get a list of all of the movie ids that have been changed in the past 24 hours.
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page  (default to 1)
    # @option opts [] :start_date
    # @return [InlineResponse20093]
    def changes_movie_list(opts = {})
      data, _status_code, _headers = changes_movie_list_with_http_info(opts)
      data
    end

    # Movie List
    # Get a list of all of the movie ids that have been changed in the past 24 hours.
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page
    # @option opts [] :start_date
    # @return [Array<(InlineResponse20093, Integer, Hash)>] InlineResponse20093 data, response status code and response headers
    def changes_movie_list_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.changes_movie_list ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/movie/changes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:end_date] = opts[:end_date] unless opts[:end_date].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:start_date] = opts[:start_date] unless opts[:start_date].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20093'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#changes_movie_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # People List
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page  (default to 1)
    # @option opts [] :start_date
    # @return [InlineResponse20095]
    def changes_people_list(opts = {})
      data, _status_code, _headers = changes_people_list_with_http_info(opts)
      data
    end

    # People List
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page
    # @option opts [] :start_date
    # @return [Array<(InlineResponse20095, Integer, Hash)>] InlineResponse20095 data, response status code and response headers
    def changes_people_list_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.changes_people_list ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/person/changes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:end_date] = opts[:end_date] unless opts[:end_date].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:start_date] = opts[:start_date] unless opts[:start_date].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20095'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#changes_people_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # TV List
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page  (default to 1)
    # @option opts [] :start_date
    # @return [InlineResponse20094]
    def changes_tv_list(opts = {})
      data, _status_code, _headers = changes_tv_list_with_http_info(opts)
      data
    end

    # TV List
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page
    # @option opts [] :start_date
    # @return [Array<(InlineResponse20094, Integer, Hash)>] InlineResponse20094 data, response status code and response headers
    def changes_tv_list_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.changes_tv_list ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/tv/changes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:end_date] = opts[:end_date] unless opts[:end_date].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:start_date] = opts[:start_date] unless opts[:start_date].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20094'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#changes_tv_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # Get collection details by ID.
    # @param collection_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20096]
    def collection_details(collection_id, opts = {})
      data, _status_code, _headers = collection_details_with_http_info(collection_id, opts)
      data
    end

    # Details
    # Get collection details by ID.
    # @param collection_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse20096, Integer, Hash)>] InlineResponse20096 data, response status code and response headers
    def collection_details_with_http_info(collection_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.collection_details ...' if @api_client.config.debugging
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        raise ArgumentError, "Missing the required parameter 'collection_id' when calling DefaultApi.collection_details"
      end

      # resource path
      local_var_path = '/3/collection/{collection_id}'.sub('{collection_id}', collection_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20096'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#collection_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Images
    # Get the images that belong to a collection.
    # @param collection_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_image_language specify a comma separated list of ISO-639-1 values to query, for example: &#x60;en,null&#x60;
    # @option opts [] :language
    # @return [InlineResponse20097]
    def collection_images(collection_id, opts = {})
      data, _status_code, _headers = collection_images_with_http_info(collection_id, opts)
      data
    end

    # Images
    # Get the images that belong to a collection.
    # @param collection_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_image_language specify a comma separated list of ISO-639-1 values to query, for example: &#x60;en,null&#x60;
    # @option opts [] :language
    # @return [Array<(InlineResponse20097, Integer, Hash)>] InlineResponse20097 data, response status code and response headers
    def collection_images_with_http_info(collection_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.collection_images ...' if @api_client.config.debugging
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        raise ArgumentError, "Missing the required parameter 'collection_id' when calling DefaultApi.collection_images"
      end

      # resource path
      local_var_path = '/3/collection/{collection_id}/images'.sub('{collection_id}', collection_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:include_image_language].nil?
        query_params[:include_image_language] =
          opts[:include_image_language]
      end
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20097'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#collection_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Translations
    # @param collection_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20098]
    def collection_translations(collection_id, opts = {})
      data, _status_code, _headers = collection_translations_with_http_info(collection_id, opts)
      data
    end

    # Translations
    # @param collection_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20098, Integer, Hash)>] InlineResponse20098 data, response status code and response headers
    def collection_translations_with_http_info(collection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.collection_translations ...'
      end
      # verify the required parameter 'collection_id' is set
      if @api_client.config.client_side_validation && collection_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'collection_id' when calling DefaultApi.collection_translations"
      end

      # resource path
      local_var_path = '/3/collection/{collection_id}/translations'.sub('{collection_id}', collection_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20098'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#collection_translations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Alternative Names
    # Get the company details by ID.
    # @param company_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200100]
    def company_alternative_names(company_id, opts = {})
      data, _status_code, _headers = company_alternative_names_with_http_info(company_id, opts)
      data
    end

    # Alternative Names
    # Get the company details by ID.
    # @param company_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200100, Integer, Hash)>] InlineResponse200100 data, response status code and response headers
    def company_alternative_names_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.company_alternative_names ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'company_id' when calling DefaultApi.company_alternative_names"
      end

      # resource path
      local_var_path = '/3/company/{company_id}/alternative_names'.sub('{company_id}', company_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200100'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#company_alternative_names\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # Get the company details by ID.
    # @param company_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20099]
    def company_details(company_id, opts = {})
      data, _status_code, _headers = company_details_with_http_info(company_id, opts)
      data
    end

    # Details
    # Get the company details by ID.
    # @param company_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20099, Integer, Hash)>] InlineResponse20099 data, response status code and response headers
    def company_details_with_http_info(company_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.company_details ...' if @api_client.config.debugging
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        raise ArgumentError, "Missing the required parameter 'company_id' when calling DefaultApi.company_details"
      end

      # resource path
      local_var_path = '/3/company/{company_id}'.sub('{company_id}', company_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20099'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#company_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Images
    # Get the company logos by id.
    # @param company_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200101]
    def company_images(company_id, opts = {})
      data, _status_code, _headers = company_images_with_http_info(company_id, opts)
      data
    end

    # Images
    # Get the company logos by id.
    # @param company_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200101, Integer, Hash)>] InlineResponse200101 data, response status code and response headers
    def company_images_with_http_info(company_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.company_images ...' if @api_client.config.debugging
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        raise ArgumentError, "Missing the required parameter 'company_id' when calling DefaultApi.company_images"
      end

      # resource path
      local_var_path = '/3/company/{company_id}/images'.sub('{company_id}', company_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200101'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#company_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Countries
    # Get the list of countries (ISO 3166-1 tags) used throughout TMDB.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [nil]
    def configuration_countries(opts = {})
      configuration_countries_with_http_info(opts)
      nil
    end

    # Countries
    # Get the list of countries (ISO 3166-1 tags) used throughout TMDB.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_countries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_countries ...'
      end
      # resource path
      local_var_path = '/3/configuration/countries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_countries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # Query the API configuration details.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    def configuration_details(opts = {})
      data, _status_code, _headers = configuration_details_with_http_info(opts)
      data
    end

    # Details
    # Query the API configuration details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Integer, Hash)>] InlineResponse2007 data, response status code and response headers
    def configuration_details_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_details ...'
      end
      # resource path
      local_var_path = '/3/configuration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse2007'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Jobs
    # Get the list of the jobs and departments we use on TMDB.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configuration_jobs(opts = {})
      configuration_jobs_with_http_info(opts)
      nil
    end

    # Jobs
    # Get the list of the jobs and departments we use on TMDB.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_jobs_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_jobs ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/configuration/jobs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Languages
    # Get the list of languages (ISO 639-1 tags) used throughout TMDB.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configuration_languages(opts = {})
      configuration_languages_with_http_info(opts)
      nil
    end

    # Languages
    # Get the list of languages (ISO 639-1 tags) used throughout TMDB.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_languages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_languages ...'
      end
      # resource path
      local_var_path = '/3/configuration/languages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_languages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Primary Translations
    # Get a list of the officially supported translations on TMDB.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configuration_primary_translations(opts = {})
      configuration_primary_translations_with_http_info(opts)
      nil
    end

    # Primary Translations
    # Get a list of the officially supported translations on TMDB.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_primary_translations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_primary_translations ...'
      end
      # resource path
      local_var_path = '/3/configuration/primary_translations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_primary_translations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Timezones
    # Get the list of timezones used throughout TMDB.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configuration_timezones(opts = {})
      configuration_timezones_with_http_info(opts)
      nil
    end

    # Timezones
    # Get the list of timezones used throughout TMDB.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def configuration_timezones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.configuration_timezones ...'
      end
      # resource path
      local_var_path = '/3/configuration/timezones'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#configuration_timezones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # Get a movie or TV credit details by ID.
    # @param credit_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200102]
    def credit_details(credit_id, opts = {})
      data, _status_code, _headers = credit_details_with_http_info(credit_id, opts)
      data
    end

    # Details
    # Get a movie or TV credit details by ID.
    # @param credit_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200102, Integer, Hash)>] InlineResponse200102 data, response status code and response headers
    def credit_details_with_http_info(credit_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.credit_details ...' if @api_client.config.debugging
      # verify the required parameter 'credit_id' is set
      if @api_client.config.client_side_validation && credit_id.nil?
        raise ArgumentError, "Missing the required parameter 'credit_id' when calling DefaultApi.credit_details"
      end

      # resource path
      local_var_path = '/3/credit/{credit_id}'.sub('{credit_id}', credit_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200102'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#credit_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Alternative Names
    # Get the alternative names of a network.
    # @param network_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200117]
    def details_copy(network_id, opts = {})
      data, _status_code, _headers = details_copy_with_http_info(network_id, opts)
      data
    end

    # Alternative Names
    # Get the alternative names of a network.
    # @param network_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200117, Integer, Hash)>] InlineResponse200117 data, response status code and response headers
    def details_copy_with_http_info(network_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.details_copy ...' if @api_client.config.debugging
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        raise ArgumentError, "Missing the required parameter 'network_id' when calling DefaultApi.details_copy"
      end

      # resource path
      local_var_path = '/3/network/{network_id}/alternative_names'.sub('{network_id}', network_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200117'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#details_copy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Movie
    # Find movies using over 30 filters and sort options.
    # @param [Hash] opts the optional parameters
    # @option opts [] :certification use in conjunction with &#x60;region&#x60;
    # @option opts [] :certification_gte use in conjunction with &#x60;region&#x60;
    # @option opts [] :certification_lte use in conjunction with &#x60;region&#x60;
    # @option opts [] :certification_country use in conjunction with the &#x60;certification&#x60;, &#x60;certification.gte&#x60; and &#x60;certification.lte&#x60; filters
    # @option opts [] :include_adult  (default to false)
    # @option opts [] :include_video  (default to false)
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :primary_release_year
    # @option opts [] :primary_release_date_gte
    # @option opts [] :primary_release_date_lte
    # @option opts [] :region
    # @option opts [] :release_date_gte
    # @option opts [] :release_date_lte
    # @option opts [] :sort_by  (default to popularity.desc)
    # @option opts [] :vote_average_gte
    # @option opts [] :vote_average_lte
    # @option opts [] :vote_count_gte
    # @option opts [] :vote_count_lte
    # @option opts [] :watch_region use in conjunction with &#x60;with_watch_monetization_types &#x60; or &#x60;with_watch_providers &#x60;
    # @option opts [] :with_cast can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_companies can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_crew can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_genres can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_keywords can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_origin_country
    # @option opts [] :with_original_language
    # @option opts [] :with_people can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_release_type possible values are: [1, 2, 3, 4, 5, 6] can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query, can be used in conjunction with &#x60;region&#x60;
    # @option opts [] :with_runtime_gte
    # @option opts [] :with_runtime_lte
    # @option opts [] :with_watch_monetization_types possible values are: [flatrate, free, ads, rent, buy] use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_watch_providers use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :without_companies
    # @option opts [] :without_genres
    # @option opts [] :without_keywords
    # @option opts [] :without_watch_providers
    # @option opts [] :year
    # @return [InlineResponse2001]
    def discover_movie(opts = {})
      data, _status_code, _headers = discover_movie_with_http_info(opts)
      data
    end

    # Movie
    # Find movies using over 30 filters and sort options.
    # @param [Hash] opts the optional parameters
    # @option opts [] :certification use in conjunction with &#x60;region&#x60;
    # @option opts [] :certification_gte use in conjunction with &#x60;region&#x60;
    # @option opts [] :certification_lte use in conjunction with &#x60;region&#x60;
    # @option opts [] :certification_country use in conjunction with the &#x60;certification&#x60;, &#x60;certification.gte&#x60; and &#x60;certification.lte&#x60; filters
    # @option opts [] :include_adult
    # @option opts [] :include_video
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :primary_release_year
    # @option opts [] :primary_release_date_gte
    # @option opts [] :primary_release_date_lte
    # @option opts [] :region
    # @option opts [] :release_date_gte
    # @option opts [] :release_date_lte
    # @option opts [] :sort_by
    # @option opts [] :vote_average_gte
    # @option opts [] :vote_average_lte
    # @option opts [] :vote_count_gte
    # @option opts [] :vote_count_lte
    # @option opts [] :watch_region use in conjunction with &#x60;with_watch_monetization_types &#x60; or &#x60;with_watch_providers &#x60;
    # @option opts [] :with_cast can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_companies can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_crew can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_genres can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_keywords can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_origin_country
    # @option opts [] :with_original_language
    # @option opts [] :with_people can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_release_type possible values are: [1, 2, 3, 4, 5, 6] can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query, can be used in conjunction with &#x60;region&#x60;
    # @option opts [] :with_runtime_gte
    # @option opts [] :with_runtime_lte
    # @option opts [] :with_watch_monetization_types possible values are: [flatrate, free, ads, rent, buy] use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_watch_providers use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :without_companies
    # @option opts [] :without_genres
    # @option opts [] :without_keywords
    # @option opts [] :without_watch_providers
    # @option opts [] :year
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def discover_movie_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.discover_movie ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/discover/movie'

      # query parameters
      query_params = opts[:query_params] || {}
      # query_params[:'certification'] = opts[:'certification'] if !opts[:'certification'].nil?
      # query_params[:'certification.gte'] = opts[:'certification_gte'] if !opts[:'certification_gte'].nil?
      # query_params[:'certification.lte'] = opts[:'certification_lte'] if !opts[:'certification_lte'].nil?
      # query_params[:'certification_country'] = opts[:'certification_country'] if !opts[:'certification_country'].nil?
      # query_params[:'include_adult'] = opts[:'include_adult'] if !opts[:'include_adult'].nil?
      # query_params[:'include_video'] = opts[:'include_video'] if !opts[:'include_video'].nil?
      # query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      # query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      # query_params[:'primary_release_year'] = opts[:'primary_release_year'] if !opts[:'primary_release_year'].nil?
      # query_params[:'primary_release_date.gte'] = opts[:'primary_release_date_gte'] if !opts[:'primary_release_date_gte'].nil?
      # query_params[:'primary_release_date.lte'] = opts[:'primary_release_date_lte'] if !opts[:'primary_release_date_lte'].nil?
      # query_params[:'region'] = opts[:'region'] if !opts[:'region'].nil?
      # query_params[:'release_date.gte'] = opts[:'release_date_gte'] if !opts[:'release_date_gte'].nil?
      # query_params[:'release_date.lte'] = opts[:'release_date_lte'] if !opts[:'release_date_lte'].nil?
      # query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      # query_params[:'vote_average.gte'] = opts[:'vote_average_gte'] if !opts[:'vote_average_gte'].nil?
      # query_params[:'vote_average.lte'] = opts[:'vote_average_lte'] if !opts[:'vote_average_lte'].nil?
      # query_params[:'vote_count.gte'] = opts[:'vote_count_gte'] if !opts[:'vote_count_gte'].nil?
      # query_params[:'vote_count.lte'] = opts[:'vote_count_lte'] if !opts[:'vote_count_lte'].nil?
      # query_params[:'watch_region'] = opts[:'watch_region'] if !opts[:'watch_region'].nil?
      # query_params[:'with_cast'] = opts[:'with_cast'] if !opts[:'with_cast'].nil?
      # query_params[:'with_companies'] = opts[:'with_companies'] if !opts[:'with_companies'].nil?
      # query_params[:'with_crew'] = opts[:'with_crew'] if !opts[:'with_crew'].nil?
      # query_params[:'with_genres'] = opts[:'with_genres'] if !opts[:'with_genres'].nil?
      # query_params[:'with_keywords'] = opts[:'with_keywords'] if !opts[:'with_keywords'].nil?
      # query_params[:'with_origin_country'] = opts[:'with_origin_country'] if !opts[:'with_origin_country'].nil?
      # query_params[:'with_original_language'] = opts[:'with_original_language'] if !opts[:'with_original_language'].nil?
      # query_params[:'with_people'] = opts[:'with_people'] if !opts[:'with_people'].nil?
      # query_params[:'with_release_type'] = opts[:'with_release_type'] if !opts[:'with_release_type'].nil?
      # query_params[:'with_runtime.gte'] = opts[:'with_runtime_gte'] if !opts[:'with_runtime_gte'].nil?
      # query_params[:'with_runtime.lte'] = opts[:'with_runtime_lte'] if !opts[:'with_runtime_lte'].nil?
      # query_params[:'with_watch_monetization_types'] = opts[:'with_watch_monetization_types'] if !opts[:'with_watch_monetization_types'].nil?
      # query_params[:'with_watch_providers'] = opts[:'with_watch_providers'] if !opts[:'with_watch_providers'].nil?
      # query_params[:'without_companies'] = opts[:'without_companies'] if !opts[:'without_companies'].nil?
      # query_params[:'without_genres'] = opts[:'without_genres'] if !opts[:'without_genres'].nil?
      # query_params[:'without_keywords'] = opts[:'without_keywords'] if !opts[:'without_keywords'].nil?
      # query_params[:'without_watch_providers'] = opts[:'without_watch_providers'] if !opts[:'without_watch_providers'].nil?
      # query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      puts 'JEDER'
      puts header_params

      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse2001'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#discover_movie\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # TV
    # Find TV shows using over 30 filters and sort options.
    # @param [Hash] opts the optional parameters
    # @option opts [] :air_date_gte
    # @option opts [] :air_date_lte
    # @option opts [] :first_air_date_year
    # @option opts [] :first_air_date_gte
    # @option opts [] :first_air_date_lte
    # @option opts [] :include_adult  (default to false)
    # @option opts [] :include_null_first_air_dates  (default to false)
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :screened_theatrically
    # @option opts [] :sort_by  (default to popularity.desc)
    # @option opts [] :timezone
    # @option opts [] :vote_average_gte
    # @option opts [] :vote_average_lte
    # @option opts [] :vote_count_gte
    # @option opts [] :vote_count_lte
    # @option opts [] :watch_region use in conjunction with &#x60;with_watch_monetization_types &#x60; or &#x60;with_watch_providers &#x60;
    # @option opts [] :with_companies can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_genres can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_keywords can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_networks
    # @option opts [] :with_origin_country
    # @option opts [] :with_original_language
    # @option opts [] :with_runtime_gte
    # @option opts [] :with_runtime_lte
    # @option opts [] :with_status possible values are: [0, 1, 2, 3, 4, 5], can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_watch_monetization_types possible values are: [flatrate, free, ads, rent, buy] use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_watch_providers use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :without_companies
    # @option opts [] :without_genres
    # @option opts [] :without_keywords
    # @option opts [] :without_watch_providers
    # @option opts [] :with_type possible values are: [0, 1, 2, 3, 4, 5, 6], can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @return [InlineResponse20010]
    def discover_tv(opts = {})
      data, _status_code, _headers = discover_tv_with_http_info(opts)
      data
    end

    # TV
    # Find TV shows using over 30 filters and sort options.
    # @param [Hash] opts the optional parameters
    # @option opts [] :air_date_gte
    # @option opts [] :air_date_lte
    # @option opts [] :first_air_date_year
    # @option opts [] :first_air_date_gte
    # @option opts [] :first_air_date_lte
    # @option opts [] :include_adult
    # @option opts [] :include_null_first_air_dates
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :screened_theatrically
    # @option opts [] :sort_by
    # @option opts [] :timezone
    # @option opts [] :vote_average_gte
    # @option opts [] :vote_average_lte
    # @option opts [] :vote_count_gte
    # @option opts [] :vote_count_lte
    # @option opts [] :watch_region use in conjunction with &#x60;with_watch_monetization_types &#x60; or &#x60;with_watch_providers &#x60;
    # @option opts [] :with_companies can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_genres can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_keywords can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_networks
    # @option opts [] :with_origin_country
    # @option opts [] :with_original_language
    # @option opts [] :with_runtime_gte
    # @option opts [] :with_runtime_lte
    # @option opts [] :with_status possible values are: [0, 1, 2, 3, 4, 5], can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_watch_monetization_types possible values are: [flatrate, free, ads, rent, buy] use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :with_watch_providers use in conjunction with &#x60;watch_region&#x60;, can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @option opts [] :without_companies
    # @option opts [] :without_genres
    # @option opts [] :without_keywords
    # @option opts [] :without_watch_providers
    # @option opts [] :with_type possible values are: [0, 1, 2, 3, 4, 5, 6], can be a comma (&#x60;AND&#x60;) or pipe (&#x60;OR&#x60;) separated query
    # @return [Array<(InlineResponse20010, Integer, Hash)>] InlineResponse20010 data, response status code and response headers
    def discover_tv_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.discover_tv ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/discover/tv'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'air_date.gte'] = opts[:air_date_gte] unless opts[:air_date_gte].nil?
      query_params[:'air_date.lte'] = opts[:air_date_lte] unless opts[:air_date_lte].nil?
      query_params[:first_air_date_year] = opts[:first_air_date_year] unless opts[:first_air_date_year].nil?
      query_params[:'first_air_date.gte'] = opts[:first_air_date_gte] unless opts[:first_air_date_gte].nil?
      query_params[:'first_air_date.lte'] = opts[:first_air_date_lte] unless opts[:first_air_date_lte].nil?
      query_params[:include_adult] = opts[:include_adult] unless opts[:include_adult].nil?
      unless opts[:include_null_first_air_dates].nil?
        query_params[:include_null_first_air_dates] =
          opts[:include_null_first_air_dates]
      end
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:screened_theatrically] = opts[:screened_theatrically] unless opts[:screened_theatrically].nil?
      query_params[:sort_by] = opts[:sort_by] unless opts[:sort_by].nil?
      query_params[:timezone] = opts[:timezone] unless opts[:timezone].nil?
      query_params[:'vote_average.gte'] = opts[:vote_average_gte] unless opts[:vote_average_gte].nil?
      query_params[:'vote_average.lte'] = opts[:vote_average_lte] unless opts[:vote_average_lte].nil?
      query_params[:'vote_count.gte'] = opts[:vote_count_gte] unless opts[:vote_count_gte].nil?
      query_params[:'vote_count.lte'] = opts[:vote_count_lte] unless opts[:vote_count_lte].nil?
      query_params[:watch_region] = opts[:watch_region] unless opts[:watch_region].nil?
      query_params[:with_companies] = opts[:with_companies] unless opts[:with_companies].nil?
      query_params[:with_genres] = opts[:with_genres] unless opts[:with_genres].nil?
      query_params[:with_keywords] = opts[:with_keywords] unless opts[:with_keywords].nil?
      query_params[:with_networks] = opts[:with_networks] unless opts[:with_networks].nil?
      query_params[:with_origin_country] = opts[:with_origin_country] unless opts[:with_origin_country].nil?
      unless opts[:with_original_language].nil?
        query_params[:with_original_language] =
          opts[:with_original_language]
      end
      query_params[:'with_runtime.gte'] = opts[:with_runtime_gte] unless opts[:with_runtime_gte].nil?
      query_params[:'with_runtime.lte'] = opts[:with_runtime_lte] unless opts[:with_runtime_lte].nil?
      query_params[:with_status] = opts[:with_status] unless opts[:with_status].nil?
      unless opts[:with_watch_monetization_types].nil?
        query_params[:with_watch_monetization_types] =
          opts[:with_watch_monetization_types]
      end
      query_params[:with_watch_providers] = opts[:with_watch_providers] unless opts[:with_watch_providers].nil?
      query_params[:without_companies] = opts[:without_companies] unless opts[:without_companies].nil?
      query_params[:without_genres] = opts[:without_genres] unless opts[:without_genres].nil?
      query_params[:without_keywords] = opts[:without_keywords] unless opts[:without_keywords].nil?
      unless opts[:without_watch_providers].nil?
        query_params[:without_watch_providers] =
          opts[:without_watch_providers]
      end
      query_params[:with_type] = opts[:with_type] unless opts[:with_type].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20010'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#discover_tv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Find By ID
    # Find data by external ID's.
    # @param external_id
    # @param external_source
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [InlineResponse20037]
    def find_by_id(external_id, external_source, opts = {})
      data, _status_code, _headers = find_by_id_with_http_info(external_id, external_source, opts)
      data
    end

    # Find By ID
    # Find data by external ID&#x27;s.
    # @param external_id
    # @param external_source
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse20037, Integer, Hash)>] InlineResponse20037 data, response status code and response headers
    def find_by_id_with_http_info(external_id, external_source, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.find_by_id ...' if @api_client.config.debugging
      # verify the required parameter 'external_id' is set
      if @api_client.config.client_side_validation && external_id.nil?
        raise ArgumentError, "Missing the required parameter 'external_id' when calling DefaultApi.find_by_id"
      end
      # verify the required parameter 'external_source' is set
      if @api_client.config.client_side_validation && external_source.nil?
        raise ArgumentError, "Missing the required parameter 'external_source' when calling DefaultApi.find_by_id"
      end

      # resource path
      local_var_path = '/3/find/{external_id}'.sub('{external_id}', external_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:external_source] = external_source
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20037'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#find_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Movie List
    # Get the list of official genres for movies.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en)
    # @return [InlineResponse200103]
    def genre_movie_list(opts = {})
      data, _status_code, _headers = genre_movie_list_with_http_info(opts)
      data
    end

    # Movie List
    # Get the list of official genres for movies.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse200103, Integer, Hash)>] InlineResponse200103 data, response status code and response headers
    def genre_movie_list_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.genre_movie_list ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/genre/movie/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200103'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#genre_movie_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # TV List
    # Get the list of official genres for TV shows.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en)
    # @return [InlineResponse200104]
    def genre_tv_list(opts = {})
      data, _status_code, _headers = genre_tv_list_with_http_info(opts)
      data
    end

    # TV List
    # Get the list of official genres for TV shows.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse200104, Integer, Hash)>] InlineResponse200104 data, response status code and response headers
    def genre_tv_list_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.genre_tv_list ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/genre/tv/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200104'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#genre_tv_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Rated Movies
    # Get the rated movies for a guest session.
    # @param guest_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :sort_by  (default to created_at.asc)
    # @return [InlineResponse200105]
    def guest_session_rated_movies(guest_session_id, opts = {})
      data, _status_code, _headers = guest_session_rated_movies_with_http_info(guest_session_id, opts)
      data
    end

    # Rated Movies
    # Get the rated movies for a guest session.
    # @param guest_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :sort_by
    # @return [Array<(InlineResponse200105, Integer, Hash)>] InlineResponse200105 data, response status code and response headers
    def guest_session_rated_movies_with_http_info(guest_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.guest_session_rated_movies ...'
      end
      # verify the required parameter 'guest_session_id' is set
      if @api_client.config.client_side_validation && guest_session_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'guest_session_id' when calling DefaultApi.guest_session_rated_movies"
      end

      # resource path
      local_var_path = '/3/guest_session/{guest_session_id}/rated/movies'.sub('{guest_session_id}',
                                                                              guest_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:sort_by] = opts[:sort_by] unless opts[:sort_by].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200105'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#guest_session_rated_movies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Rated TV
    # Get the rated TV shows for a guest session.
    # @param guest_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :sort_by  (default to created_at.asc)
    # @return [InlineResponse200106]
    def guest_session_rated_tv(guest_session_id, opts = {})
      data, _status_code, _headers = guest_session_rated_tv_with_http_info(guest_session_id, opts)
      data
    end

    # Rated TV
    # Get the rated TV shows for a guest session.
    # @param guest_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :sort_by
    # @return [Array<(InlineResponse200106, Integer, Hash)>] InlineResponse200106 data, response status code and response headers
    def guest_session_rated_tv_with_http_info(guest_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.guest_session_rated_tv ...'
      end
      # verify the required parameter 'guest_session_id' is set
      if @api_client.config.client_side_validation && guest_session_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'guest_session_id' when calling DefaultApi.guest_session_rated_tv"
      end

      # resource path
      local_var_path = '/3/guest_session/{guest_session_id}/rated/tv'.sub('{guest_session_id}',
                                                                          guest_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:sort_by] = opts[:sort_by] unless opts[:sort_by].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200106'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#guest_session_rated_tv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Rated TV Episodes
    # Get the rated TV episodes for a guest session.
    # @param guest_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :sort_by  (default to created_at.asc)
    # @return [InlineResponse200107]
    def guest_session_rated_tv_episodes(guest_session_id, opts = {})
      data, _status_code, _headers = guest_session_rated_tv_episodes_with_http_info(guest_session_id, opts)
      data
    end

    # Rated TV Episodes
    # Get the rated TV episodes for a guest session.
    # @param guest_session_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :sort_by
    # @return [Array<(InlineResponse200107, Integer, Hash)>] InlineResponse200107 data, response status code and response headers
    def guest_session_rated_tv_episodes_with_http_info(guest_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.guest_session_rated_tv_episodes ...'
      end
      # verify the required parameter 'guest_session_id' is set
      if @api_client.config.client_side_validation && guest_session_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'guest_session_id' when calling DefaultApi.guest_session_rated_tv_episodes"
      end

      # resource path
      local_var_path = '/3/guest_session/{guest_session_id}/rated/tv/episodes'.sub('{guest_session_id}',
                                                                                   guest_session_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:sort_by] = opts[:sort_by] unless opts[:sort_by].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200107'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#guest_session_rated_tv_episodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # @param keyword_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200110]
    def keyword_details(keyword_id, opts = {})
      data, _status_code, _headers = keyword_details_with_http_info(keyword_id, opts)
      data
    end

    # Details
    # @param keyword_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200110, Integer, Hash)>] InlineResponse200110 data, response status code and response headers
    def keyword_details_with_http_info(keyword_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.keyword_details ...' if @api_client.config.debugging
      # verify the required parameter 'keyword_id' is set
      if @api_client.config.client_side_validation && keyword_id.nil?
        raise ArgumentError, "Missing the required parameter 'keyword_id' when calling DefaultApi.keyword_details"
      end

      # resource path
      local_var_path = '/3/keyword/{keyword_id}'.sub('{keyword_id}', keyword_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200110'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#keyword_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Movies
    # @param keyword_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_adult  (default to false)
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse200111]
    def keyword_movies(keyword_id, opts = {})
      data, _status_code, _headers = keyword_movies_with_http_info(keyword_id, opts)
      data
    end

    # Movies
    # @param keyword_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_adult
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse200111, Integer, Hash)>] InlineResponse200111 data, response status code and response headers
    def keyword_movies_with_http_info(keyword_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.keyword_movies ...' if @api_client.config.debugging
      # verify the required parameter 'keyword_id' is set
      if @api_client.config.client_side_validation && keyword_id.nil?
        raise ArgumentError, "Missing the required parameter 'keyword_id' when calling DefaultApi.keyword_movies"
      end

      # resource path
      local_var_path = '/3/keyword/{keyword_id}/movies'.sub('{keyword_id}', keyword_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include_adult] = opts[:include_adult] unless opts[:include_adult].nil?
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200111'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#keyword_movies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Add Movie
    # Add a movie to a list.
    # @param session_id
    # @param list_id
    # @param [Hash] opts the optional parameters
    # @option opts [ListIdAddItemBody] :body
    # @return [InlineResponse200113]
    def list_add_movie(session_id, list_id, opts = {})
      data, _status_code, _headers = list_add_movie_with_http_info(session_id, list_id, opts)
      data
    end

    # Add Movie
    # Add a movie to a list.
    # @param session_id
    # @param list_id
    # @param [Hash] opts the optional parameters
    # @option opts [ListIdAddItemBody] :body
    # @return [Array<(InlineResponse200113, Integer, Hash)>] InlineResponse200113 data, response status code and response headers
    def list_add_movie_with_http_info(session_id, list_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.list_add_movie ...' if @api_client.config.debugging
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        raise ArgumentError, "Missing the required parameter 'session_id' when calling DefaultApi.list_add_movie"
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        raise ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_add_movie"
      end

      # resource path
      local_var_path = '/3/list/{list_id}/add_item'.sub('{list_id}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:session_id] = session_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InlineResponse200113'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_add_movie\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Check Item Status
    # Use this method to check if an item has already been added to the list.
    # @param list_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :movie_id
    # @return [InlineResponse200114]
    def list_check_item_status(list_id, opts = {})
      data, _status_code, _headers = list_check_item_status_with_http_info(list_id, opts)
      data
    end

    # Check Item Status
    # Use this method to check if an item has already been added to the list.
    # @param list_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :movie_id
    # @return [Array<(InlineResponse200114, Integer, Hash)>] InlineResponse200114 data, response status code and response headers
    def list_check_item_status_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_check_item_status ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        raise ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_check_item_status"
      end

      # resource path
      local_var_path = '/3/list/{list_id}/item_status'.sub('{list_id}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:movie_id] = opts[:movie_id] unless opts[:movie_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200114'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_check_item_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Clear
    # Clear all items from a list.
    # @param list_id
    # @param session_id
    # @param confirm
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200113]
    def list_clear(list_id, session_id, confirm, opts = {})
      data, _status_code, _headers = list_clear_with_http_info(list_id, session_id, confirm, opts)
      data
    end

    # Clear
    # Clear all items from a list.
    # @param list_id
    # @param session_id
    # @param confirm
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200113, Integer, Hash)>] InlineResponse200113 data, response status code and response headers
    def list_clear_with_http_info(list_id, session_id, confirm, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.list_clear ...' if @api_client.config.debugging
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        raise ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_clear"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        raise ArgumentError, "Missing the required parameter 'session_id' when calling DefaultApi.list_clear"
      end
      # verify the required parameter 'confirm' is set
      if @api_client.config.client_side_validation && confirm.nil?
        raise ArgumentError, "Missing the required parameter 'confirm' when calling DefaultApi.list_clear"
      end

      # resource path
      local_var_path = '/3/list/{list_id}/clear'.sub('{list_id}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:session_id] = session_id
      query_params[:confirm] = confirm

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200113'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_clear\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create
    # @param session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Model3ListBody] :body
    # @return [InlineResponse200115]
    def list_create(session_id, opts = {})
      data, _status_code, _headers = list_create_with_http_info(session_id, opts)
      data
    end

    # Create
    # @param session_id
    # @param [Hash] opts the optional parameters
    # @option opts [Model3ListBody] :body
    # @return [Array<(InlineResponse200115, Integer, Hash)>] InlineResponse200115 data, response status code and response headers
    def list_create_with_http_info(session_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.list_create ...' if @api_client.config.debugging
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        raise ArgumentError, "Missing the required parameter 'session_id' when calling DefaultApi.list_create"
      end

      # resource path
      local_var_path = '/3/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:session_id] = session_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InlineResponse200115'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete
    # Delete a list.
    # @param list_id
    # @param session_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200113]
    def list_delete(list_id, session_id, opts = {})
      data, _status_code, _headers = list_delete_with_http_info(list_id, session_id, opts)
      data
    end

    # Delete
    # Delete a list.
    # @param list_id
    # @param session_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200113, Integer, Hash)>] InlineResponse200113 data, response status code and response headers
    def list_delete_with_http_info(list_id, session_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.list_delete ...' if @api_client.config.debugging
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        raise ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_delete"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        raise ArgumentError, "Missing the required parameter 'session_id' when calling DefaultApi.list_delete"
      end

      # resource path
      local_var_path = '/3/list/{list_id}'.sub('{list_id}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:session_id] = session_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200113'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # @param list_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse200112]
    def list_details(list_id, opts = {})
      data, _status_code, _headers = list_details_with_http_info(list_id, opts)
      data
    end

    # Details
    # @param list_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse200112, Integer, Hash)>] InlineResponse200112 data, response status code and response headers
    def list_details_with_http_info(list_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.list_details ...' if @api_client.config.debugging
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        raise ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_details"
      end

      # resource path
      local_var_path = '/3/list/{list_id}'.sub('{list_id}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200112'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Remove Movie
    # Remove a movie from a list.
    # @param session_id
    # @param list_id
    # @param [Hash] opts the optional parameters
    # @option opts [ListIdRemoveItemBody] :body
    # @return [InlineResponse20031]
    def list_remove_movie(session_id, list_id, opts = {})
      data, _status_code, _headers = list_remove_movie_with_http_info(session_id, list_id, opts)
      data
    end

    # Remove Movie
    # Remove a movie from a list.
    # @param session_id
    # @param list_id
    # @param [Hash] opts the optional parameters
    # @option opts [ListIdRemoveItemBody] :body
    # @return [Array<(InlineResponse20031, Integer, Hash)>] InlineResponse20031 data, response status code and response headers
    def list_remove_movie_with_http_info(session_id, list_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.list_remove_movie ...' if @api_client.config.debugging
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        raise ArgumentError, "Missing the required parameter 'session_id' when calling DefaultApi.list_remove_movie"
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        raise ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_remove_movie"
      end

      # resource path
      local_var_path = '/3/list/{list_id}/remove_item'.sub('{list_id}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:session_id] = session_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InlineResponse20031'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_remove_movie\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Lists
    # Get the lists that a TV series has been added to.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse200129]
    def lists_copy(series_id, opts = {})
      data, _status_code, _headers = lists_copy_with_http_info(series_id, opts)
      data
    end

    # Lists
    # Get the lists that a TV series has been added to.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse200129, Integer, Hash)>] InlineResponse200129 data, response status code and response headers
    def lists_copy_with_http_info(series_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.lists_copy ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.lists_copy"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/lists'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200129'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#lists_copy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Account States
    # Get the rating, watchlist and favourite status of an account.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :session_id
    # @option opts [] :guest_session_id
    # @return [InlineResponse20016]
    def movie_account_states(movie_id, opts = {})
      data, _status_code, _headers = movie_account_states_with_http_info(movie_id, opts)
      data
    end

    # Account States
    # Get the rating, watchlist and favourite status of an account.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :session_id
    # @option opts [] :guest_session_id
    # @return [Array<(InlineResponse20016, Integer, Hash)>] InlineResponse20016 data, response status code and response headers
    def movie_account_states_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_account_states ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_account_states"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/account_states'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?
      query_params[:guest_session_id] = opts[:guest_session_id] unless opts[:guest_session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20016'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_account_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Add Rating
    # Rate a movie and save it to your rated list.
    # @param content_type
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [MovieIdRatingBody] :body
    # @option opts [] :guest_session_id
    # @option opts [] :session_id
    # @return [InlineResponse20030]
    def movie_add_rating(content_type, movie_id, opts = {})
      data, _status_code, _headers = movie_add_rating_with_http_info(content_type, movie_id, opts)
      data
    end

    # Add Rating
    # Rate a movie and save it to your rated list.
    # @param content_type
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [MovieIdRatingBody] :body
    # @option opts [] :guest_session_id
    # @option opts [] :session_id
    # @return [Array<(InlineResponse20030, Integer, Hash)>] InlineResponse20030 data, response status code and response headers
    def movie_add_rating_with_http_info(content_type, movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_add_rating ...' if @api_client.config.debugging
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        raise ArgumentError, "Missing the required parameter 'content_type' when calling DefaultApi.movie_add_rating"
      end
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_add_rating"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/rating'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:guest_session_id] = opts[:guest_session_id] unless opts[:guest_session_id].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InlineResponse20030'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_add_rating\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Alternative Titles
    # Get the alternative titles for a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :country specify a ISO-3166-1 value to filter the results
    # @return [InlineResponse20018]
    def movie_alternative_titles(movie_id, opts = {})
      data, _status_code, _headers = movie_alternative_titles_with_http_info(movie_id, opts)
      data
    end

    # Alternative Titles
    # Get the alternative titles for a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :country specify a ISO-3166-1 value to filter the results
    # @return [Array<(InlineResponse20018, Integer, Hash)>] InlineResponse20018 data, response status code and response headers
    def movie_alternative_titles_with_http_info(movie_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.movie_alternative_titles ...'
      end
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'movie_id' when calling DefaultApi.movie_alternative_titles"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/alternative_titles'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:country] = opts[:country] unless opts[:country].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20018'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_alternative_titles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Changes
    # Get the recent changes for a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page  (default to 1)
    # @option opts [] :start_date
    # @return [InlineResponse20019]
    def movie_changes(movie_id, opts = {})
      data, _status_code, _headers = movie_changes_with_http_info(movie_id, opts)
      data
    end

    # Changes
    # Get the recent changes for a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page
    # @option opts [] :start_date
    # @return [Array<(InlineResponse20019, Integer, Hash)>] InlineResponse20019 data, response status code and response headers
    def movie_changes_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_changes ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_changes"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/changes'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:end_date] = opts[:end_date] unless opts[:end_date].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:start_date] = opts[:start_date] unless opts[:start_date].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20019'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Credits
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20020]
    def movie_credits(movie_id, opts = {})
      data, _status_code, _headers = movie_credits_with_http_info(movie_id, opts)
      data
    end

    # Credits
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse20020, Integer, Hash)>] InlineResponse20020 data, response status code and response headers
    def movie_credits_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_credits ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_credits"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/credits'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20020'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_credits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Rating
    # Delete a user rating.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :content_type  (default to application/json;charset=utf-8)
    # @option opts [] :guest_session_id
    # @option opts [] :session_id
    # @return [InlineResponse20031]
    def movie_delete_rating(movie_id, opts = {})
      data, _status_code, _headers = movie_delete_rating_with_http_info(movie_id, opts)
      data
    end

    # Delete Rating
    # Delete a user rating.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :content_type
    # @option opts [] :guest_session_id
    # @option opts [] :session_id
    # @return [Array<(InlineResponse20031, Integer, Hash)>] InlineResponse20031 data, response status code and response headers
    def movie_delete_rating_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_delete_rating ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_delete_rating"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/rating'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:guest_session_id] = opts[:guest_session_id] unless opts[:guest_session_id].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = opts[:content_type] unless opts[:content_type].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20031'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_delete_rating\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # Get the top level details of a movie by ID.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :append_to_response comma separated list of endpoints within this namespace, 20 items max
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse2002]
    def movie_details(movie_id, opts = {})
      data, _status_code, _headers = movie_details_with_http_info(movie_id, opts)
      data
    end

    # Details
    # Get the top level details of a movie by ID.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :append_to_response comma separated list of endpoints within this namespace, 20 items max
    # @option opts [] :language
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def movie_details_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_details ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_details"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:append_to_response] = opts[:append_to_response] unless opts[:append_to_response].nil?
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse2002'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # External IDs
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20021]
    def movie_external_ids(movie_id, opts = {})
      data, _status_code, _headers = movie_external_ids_with_http_info(movie_id, opts)
      data
    end

    # External IDs
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20021, Integer, Hash)>] InlineResponse20021 data, response status code and response headers
    def movie_external_ids_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_external_ids ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_external_ids"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/external_ids'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20021'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_external_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Images
    # Get the images that belong to a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_image_language specify a comma separated list of ISO-639-1 values to query, for example: &#x60;en,null&#x60;
    # @option opts [] :language
    # @return [InlineResponse20011]
    def movie_images(movie_id, opts = {})
      data, _status_code, _headers = movie_images_with_http_info(movie_id, opts)
      data
    end

    # Images
    # Get the images that belong to a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_image_language specify a comma separated list of ISO-639-1 values to query, for example: &#x60;en,null&#x60;
    # @option opts [] :language
    # @return [Array<(InlineResponse20011, Integer, Hash)>] InlineResponse20011 data, response status code and response headers
    def movie_images_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_images ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_images"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/images'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:include_image_language].nil?
        query_params[:include_image_language] =
          opts[:include_image_language]
      end
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20011'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Keywords
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20022]
    def movie_keywords(movie_id, opts = {})
      data, _status_code, _headers = movie_keywords_with_http_info(movie_id, opts)
      data
    end

    # Keywords
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20022, Integer, Hash)>] InlineResponse20022 data, response status code and response headers
    def movie_keywords_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_keywords ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_keywords"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/keywords'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20022'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_keywords\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Latest
    # Get the newest movie ID.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20056]
    def movie_latest_id(opts = {})
      data, _status_code, _headers = movie_latest_id_with_http_info(opts)
      data
    end

    # Latest
    # Get the newest movie ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20056, Integer, Hash)>] InlineResponse20056 data, response status code and response headers
    def movie_latest_id_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_latest_id ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/movie/latest'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20056'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_latest_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Lists
    # Get the lists that a movie has been added to.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse20023]
    def movie_lists(movie_id, opts = {})
      data, _status_code, _headers = movie_lists_with_http_info(movie_id, opts)
      data
    end

    # Lists
    # Get the lists that a movie has been added to.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse20023, Integer, Hash)>] InlineResponse20023 data, response status code and response headers
    def movie_lists_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_lists ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_lists"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/lists'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20023'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Now Playing
    # Get a list of movies that are currently in theatres.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :region ISO-3166-1 code
    # @return [InlineResponse20051]
    def movie_now_playing_list(opts = {})
      data, _status_code, _headers = movie_now_playing_list_with_http_info(opts)
      data
    end

    # Now Playing
    # Get a list of movies that are currently in theatres.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :region ISO-3166-1 code
    # @return [Array<(InlineResponse20051, Integer, Hash)>] InlineResponse20051 data, response status code and response headers
    def movie_now_playing_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.movie_now_playing_list ...'
      end
      # resource path
      local_var_path = '/3/movie/now_playing'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:region] = opts[:region] unless opts[:region].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20051'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_now_playing_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Popular
    # Get a list of movies ordered by popularity.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :region ISO-3166-1 code
    # @return [InlineResponse20048]
    def movie_popular_list(opts = {})
      data, _status_code, _headers = movie_popular_list_with_http_info(opts)
      data
    end

    # Popular
    # Get a list of movies ordered by popularity.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :region ISO-3166-1 code
    # @return [Array<(InlineResponse20048, Integer, Hash)>] InlineResponse20048 data, response status code and response headers
    def movie_popular_list_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_popular_list ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/movie/popular'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:region] = opts[:region] unless opts[:region].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20048'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_popular_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Recommendations
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [nil]
    def movie_recommendations(movie_id, opts = {})
      movie_recommendations_with_http_info(movie_id, opts)
      nil
    end

    # Recommendations
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def movie_recommendations_with_http_info(movie_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.movie_recommendations ...'
      end
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_recommendations"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/recommendations'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_recommendations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Release Dates
    # Get the release dates and certifications for a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20024]
    def movie_release_dates(movie_id, opts = {})
      data, _status_code, _headers = movie_release_dates_with_http_info(movie_id, opts)
      data
    end

    # Release Dates
    # Get the release dates and certifications for a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20024, Integer, Hash)>] InlineResponse20024 data, response status code and response headers
    def movie_release_dates_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_release_dates ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_release_dates"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/release_dates'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20024'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_release_dates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Reviews
    # Get the user reviews for a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse20025]
    def movie_reviews(movie_id, opts = {})
      data, _status_code, _headers = movie_reviews_with_http_info(movie_id, opts)
      data
    end

    # Reviews
    # Get the user reviews for a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse20025, Integer, Hash)>] InlineResponse20025 data, response status code and response headers
    def movie_reviews_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_reviews ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_reviews"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/reviews'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20025'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_reviews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Similar
    # Get the similar movies based on genres and keywords.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse20026]
    def movie_similar(movie_id, opts = {})
      data, _status_code, _headers = movie_similar_with_http_info(movie_id, opts)
      data
    end

    # Similar
    # Get the similar movies based on genres and keywords.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse20026, Integer, Hash)>] InlineResponse20026 data, response status code and response headers
    def movie_similar_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_similar ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_similar"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/similar'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20026'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_similar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Top Rated
    # Get a list of movies ordered by rating.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :region ISO-3166-1 code
    # @return [InlineResponse20049]
    def movie_top_rated_list(opts = {})
      data, _status_code, _headers = movie_top_rated_list_with_http_info(opts)
      data
    end

    # Top Rated
    # Get a list of movies ordered by rating.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :region ISO-3166-1 code
    # @return [Array<(InlineResponse20049, Integer, Hash)>] InlineResponse20049 data, response status code and response headers
    def movie_top_rated_list_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_top_rated_list ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/movie/top_rated'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:region] = opts[:region] unless opts[:region].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20049'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_top_rated_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Translations
    # Get the translations for a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20027]
    def movie_translations(movie_id, opts = {})
      data, _status_code, _headers = movie_translations_with_http_info(movie_id, opts)
      data
    end

    # Translations
    # Get the translations for a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20027, Integer, Hash)>] InlineResponse20027 data, response status code and response headers
    def movie_translations_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_translations ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_translations"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/translations'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20027'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_translations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Upcoming
    # Get a list of movies that are being released soon.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :region ISO-3166-1 code
    # @return [InlineResponse20050]
    def movie_upcoming_list(opts = {})
      data, _status_code, _headers = movie_upcoming_list_with_http_info(opts)
      data
    end

    # Upcoming
    # Get a list of movies that are being released soon.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :region ISO-3166-1 code
    # @return [Array<(InlineResponse20050, Integer, Hash)>] InlineResponse20050 data, response status code and response headers
    def movie_upcoming_list_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_upcoming_list ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/movie/upcoming'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:region] = opts[:region] unless opts[:region].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20050'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_upcoming_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Videos
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20028]
    def movie_videos(movie_id, opts = {})
      data, _status_code, _headers = movie_videos_with_http_info(movie_id, opts)
      data
    end

    # Videos
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse20028, Integer, Hash)>] InlineResponse20028 data, response status code and response headers
    def movie_videos_with_http_info(movie_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.movie_videos ...' if @api_client.config.debugging
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_videos"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/videos'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20028'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_videos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Watch Providers
    # Get the list of streaming providers we have for a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20029]
    def movie_watch_providers(movie_id, opts = {})
      data, _status_code, _headers = movie_watch_providers_with_http_info(movie_id, opts)
      data
    end

    # Watch Providers
    # Get the list of streaming providers we have for a movie.
    # @param movie_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20029, Integer, Hash)>] InlineResponse20029 data, response status code and response headers
    def movie_watch_providers_with_http_info(movie_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.movie_watch_providers ...'
      end
      # verify the required parameter 'movie_id' is set
      if @api_client.config.client_side_validation && movie_id.nil?
        raise ArgumentError, "Missing the required parameter 'movie_id' when calling DefaultApi.movie_watch_providers"
      end

      # resource path
      local_var_path = '/3/movie/{movie_id}/watch/providers'.sub('{movie_id}', movie_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20029'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#movie_watch_providers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # @param network_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200116]
    def network_details(network_id, opts = {})
      data, _status_code, _headers = network_details_with_http_info(network_id, opts)
      data
    end

    # Details
    # @param network_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200116, Integer, Hash)>] InlineResponse200116 data, response status code and response headers
    def network_details_with_http_info(network_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.network_details ...' if @api_client.config.debugging
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        raise ArgumentError, "Missing the required parameter 'network_id' when calling DefaultApi.network_details"
      end

      # resource path
      local_var_path = '/3/network/{network_id}'.sub('{network_id}', network_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200116'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#network_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Changes
    # Get the recent changes for a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page  (default to 1)
    # @option opts [] :start_date
    # @return [InlineResponse20039]
    def person_changes(person_id, opts = {})
      data, _status_code, _headers = person_changes_with_http_info(person_id, opts)
      data
    end

    # Changes
    # Get the recent changes for a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page
    # @option opts [] :start_date
    # @return [Array<(InlineResponse20039, Integer, Hash)>] InlineResponse20039 data, response status code and response headers
    def person_changes_with_http_info(person_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.person_changes ...' if @api_client.config.debugging
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        raise ArgumentError, "Missing the required parameter 'person_id' when calling DefaultApi.person_changes"
      end

      # resource path
      local_var_path = '/3/person/{person_id}/changes'.sub('{person_id}', person_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:end_date] = opts[:end_date] unless opts[:end_date].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:start_date] = opts[:start_date] unless opts[:start_date].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20039'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Combined Credits
    # Get the combined movie and TV credits that belong to a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20043]
    def person_combined_credits(person_id, opts = {})
      data, _status_code, _headers = person_combined_credits_with_http_info(person_id, opts)
      data
    end

    # Combined Credits
    # Get the combined movie and TV credits that belong to a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse20043, Integer, Hash)>] InlineResponse20043 data, response status code and response headers
    def person_combined_credits_with_http_info(person_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.person_combined_credits ...'
      end
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'person_id' when calling DefaultApi.person_combined_credits"
      end

      # resource path
      local_var_path = '/3/person/{person_id}/combined_credits'.sub('{person_id}', person_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20043'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_combined_credits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # Query the top level details of a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :append_to_response comma separated list of endpoints within this namespace, 20 items max
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20038]
    def person_details(person_id, opts = {})
      data, _status_code, _headers = person_details_with_http_info(person_id, opts)
      data
    end

    # Details
    # Query the top level details of a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :append_to_response comma separated list of endpoints within this namespace, 20 items max
    # @option opts [] :language
    # @return [Array<(InlineResponse20038, Integer, Hash)>] InlineResponse20038 data, response status code and response headers
    def person_details_with_http_info(person_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.person_details ...' if @api_client.config.debugging
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        raise ArgumentError, "Missing the required parameter 'person_id' when calling DefaultApi.person_details"
      end

      # resource path
      local_var_path = '/3/person/{person_id}'.sub('{person_id}', person_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:append_to_response] = opts[:append_to_response] unless opts[:append_to_response].nil?
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20038'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # External IDs
    # Get the external ID's that belong to a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20044]
    def person_external_ids(person_id, opts = {})
      data, _status_code, _headers = person_external_ids_with_http_info(person_id, opts)
      data
    end

    # External IDs
    # Get the external ID&#x27;s that belong to a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20044, Integer, Hash)>] InlineResponse20044 data, response status code and response headers
    def person_external_ids_with_http_info(person_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.person_external_ids ...' if @api_client.config.debugging
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        raise ArgumentError, "Missing the required parameter 'person_id' when calling DefaultApi.person_external_ids"
      end

      # resource path
      local_var_path = '/3/person/{person_id}/external_ids'.sub('{person_id}', person_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20044'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_external_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Images
    # Get the profile images that belong to a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def person_images(person_id, opts = {})
      person_images_with_http_info(person_id, opts)
      nil
    end

    # Images
    # Get the profile images that belong to a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def person_images_with_http_info(person_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.person_images ...' if @api_client.config.debugging
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        raise ArgumentError, "Missing the required parameter 'person_id' when calling DefaultApi.person_images"
      end

      # resource path
      local_var_path = '/3/person/{person_id}/images'.sub('{person_id}', person_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Latest
    # Get the newest created person. This is a live response and will continuously change.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200123]
    def person_latest_id(opts = {})
      data, _status_code, _headers = person_latest_id_with_http_info(opts)
      data
    end

    # Latest
    # Get the newest created person. This is a live response and will continuously change.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200123, Integer, Hash)>] InlineResponse200123 data, response status code and response headers
    def person_latest_id_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.person_latest_id ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/person/latest'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200123'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_latest_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Movie Credits
    # Get the movie credits for a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20041]
    def person_movie_credits(person_id, opts = {})
      data, _status_code, _headers = person_movie_credits_with_http_info(person_id, opts)
      data
    end

    # Movie Credits
    # Get the movie credits for a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse20041, Integer, Hash)>] InlineResponse20041 data, response status code and response headers
    def person_movie_credits_with_http_info(person_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.person_movie_credits ...' if @api_client.config.debugging
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        raise ArgumentError, "Missing the required parameter 'person_id' when calling DefaultApi.person_movie_credits"
      end

      # resource path
      local_var_path = '/3/person/{person_id}/movie_credits'.sub('{person_id}', person_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20041'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_movie_credits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Popular
    # Get a list of people ordered by popularity.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse20047]
    def person_popular_list(opts = {})
      data, _status_code, _headers = person_popular_list_with_http_info(opts)
      data
    end

    # Popular
    # Get a list of people ordered by popularity.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse20047, Integer, Hash)>] InlineResponse20047 data, response status code and response headers
    def person_popular_list_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.person_popular_list ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/person/popular'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20047'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_popular_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Tagged Images
    # Get the tagged images for a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse20045]
    def person_tagged_images(person_id, opts = {})
      data, _status_code, _headers = person_tagged_images_with_http_info(person_id, opts)
      data
    end

    # Tagged Images
    # Get the tagged images for a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :page
    # @return [Array<(InlineResponse20045, Integer, Hash)>] InlineResponse20045 data, response status code and response headers
    def person_tagged_images_with_http_info(person_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.person_tagged_images ...' if @api_client.config.debugging
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        raise ArgumentError, "Missing the required parameter 'person_id' when calling DefaultApi.person_tagged_images"
      end

      # resource path
      local_var_path = '/3/person/{person_id}/tagged_images'.sub('{person_id}', person_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20045'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_tagged_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # TV Credits
    # Get the TV credits that belong to a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20042]
    def person_tv_credits(person_id, opts = {})
      data, _status_code, _headers = person_tv_credits_with_http_info(person_id, opts)
      data
    end

    # TV Credits
    # Get the TV credits that belong to a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse20042, Integer, Hash)>] InlineResponse20042 data, response status code and response headers
    def person_tv_credits_with_http_info(person_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.person_tv_credits ...' if @api_client.config.debugging
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        raise ArgumentError, "Missing the required parameter 'person_id' when calling DefaultApi.person_tv_credits"
      end

      # resource path
      local_var_path = '/3/person/{person_id}/tv_credits'.sub('{person_id}', person_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20042'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#person_tv_credits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # Retrieve the details of a movie or TV show review.
    # @param review_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200119]
    def review_details(review_id, opts = {})
      data, _status_code, _headers = review_details_with_http_info(review_id, opts)
      data
    end

    # Details
    # Retrieve the details of a movie or TV show review.
    # @param review_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200119, Integer, Hash)>] InlineResponse200119 data, response status code and response headers
    def review_details_with_http_info(review_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.review_details ...' if @api_client.config.debugging
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        raise ArgumentError, "Missing the required parameter 'review_id' when calling DefaultApi.review_details"
      end

      # resource path
      local_var_path = '/3/review/{review_id}'.sub('{review_id}', review_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200119'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#review_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Collection
    # Search for collections by their original, translated and alternative names.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_adult  (default to false)
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :region
    # @return [InlineResponse200127]
    def search_collection(query, opts = {})
      data, _status_code, _headers = search_collection_with_http_info(query, opts)
      data
    end

    # Collection
    # Search for collections by their original, translated and alternative names.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_adult
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :region
    # @return [Array<(InlineResponse200127, Integer, Hash)>] InlineResponse200127 data, response status code and response headers
    def search_collection_with_http_info(query, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.search_collection ...' if @api_client.config.debugging
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        raise ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_collection"
      end

      # resource path
      local_var_path = '/3/search/collection'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:query] = query
      query_params[:include_adult] = opts[:include_adult] unless opts[:include_adult].nil?
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:region] = opts[:region] unless opts[:region].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200127'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Company
    # Search for companies by their original and alternative names.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse200126]
    def search_company(query, opts = {})
      data, _status_code, _headers = search_company_with_http_info(query, opts)
      data
    end

    # Company
    # Search for companies by their original and alternative names.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :page
    # @return [Array<(InlineResponse200126, Integer, Hash)>] InlineResponse200126 data, response status code and response headers
    def search_company_with_http_info(query, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.search_company ...' if @api_client.config.debugging
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        raise ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_company"
      end

      # resource path
      local_var_path = '/3/search/company'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:query] = query
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200126'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_company\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Keyword
    # Search for keywords by their name.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse200128]
    def search_keyword(query, opts = {})
      data, _status_code, _headers = search_keyword_with_http_info(query, opts)
      data
    end

    # Keyword
    # Search for keywords by their name.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :page
    # @return [Array<(InlineResponse200128, Integer, Hash)>] InlineResponse200128 data, response status code and response headers
    def search_keyword_with_http_info(query, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.search_keyword ...' if @api_client.config.debugging
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        raise ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_keyword"
      end

      # resource path
      local_var_path = '/3/search/keyword'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:query] = query
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200128'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_keyword\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Movie
    # Search for movies by their original, translated and alternative titles.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_adult  (default to false)
    # @option opts [] :language  (default to en-US)
    # @option opts [] :primary_release_year
    # @option opts [] :page  (default to 1)
    # @option opts [] :region
    # @option opts [] :year
    # @return [InlineResponse200]
    def search_movie(query, opts = {})
      data, _status_code, _headers = search_movie_with_http_info(query, opts)
      data
    end

    # Movie
    # Search for movies by their original, translated and alternative titles.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_adult
    # @option opts [] :language
    # @option opts [] :primary_release_year
    # @option opts [] :page
    # @option opts [] :region
    # @option opts [] :year
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def search_movie_with_http_info(query, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.search_movie ...' if @api_client.config.debugging
      # verify the required parameter 'query' is set
      # if @api_client.config.client_side_validation && query.nil?
      #   raise ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_movie"
      # end

      # resource path
      local_var_path = '/3/search/movie'

      # query parameters
      query_params = opts[:query_params] || {}
            # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_movie\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Multi
    # Use multi search when you want to search for movies, TV shows and people in a single request.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_adult  (default to false)
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse2005]
    def search_multi(query, opts = {})
      data, _status_code, _headers = search_multi_with_http_info(query, opts)
      data
    end

    # Multi
    # Use multi search when you want to search for movies, TV shows and people in a single request.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_adult
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def search_multi_with_http_info(query, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.search_multi ...' if @api_client.config.debugging
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        raise ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_multi"
      end

      # resource path
      local_var_path = '/3/search/multi'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:query] = query
      query_params[:include_adult] = opts[:include_adult] unless opts[:include_adult].nil?
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse2005'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_multi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Person
    # Search for people by their name and also known as names.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_adult  (default to false)
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse2006]
    def search_person(query, opts = {})
      data, _status_code, _headers = search_person_with_http_info(query, opts)
      data
    end

    # Person
    # Search for people by their name and also known as names.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_adult
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse2006, Integer, Hash)>] InlineResponse2006 data, response status code and response headers
    def search_person_with_http_info(query, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.search_person ...' if @api_client.config.debugging
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        raise ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_person"
      end

      # resource path
      local_var_path = '/3/search/person'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:query] = query
      query_params[:include_adult] = opts[:include_adult] unless opts[:include_adult].nil?
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse2006'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # TV
    # Search for TV shows by their original, translated and also known as names.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :first_air_date_year Search only the first air date. Valid values are: 1000..9999
    # @option opts [] :include_adult  (default to false)
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :year Search the first air date and all episode air dates. Valid values are: 1000..9999
    # @return [InlineResponse2004]
    def search_tv(query, opts = {})
      data, _status_code, _headers = search_tv_with_http_info(query, opts)
      data
    end

    # TV
    # Search for TV shows by their original, translated and also known as names.
    # @param query
    # @param [Hash] opts the optional parameters
    # @option opts [] :first_air_date_year Search only the first air date. Valid values are: 1000..9999
    # @option opts [] :include_adult
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :year Search the first air date and all episode air dates. Valid values are: 1000..9999
    # @return [Array<(InlineResponse2004, Integer, Hash)>] InlineResponse2004 data, response status code and response headers
    def search_tv_with_http_info(query, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.search_tv ...' if @api_client.config.debugging
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        raise ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_tv"
      end

      # resource path
      local_var_path = '/3/search/tv'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:query] = query
      query_params[:first_air_date_year] = opts[:first_air_date_year] unless opts[:first_air_date_year].nil?
      query_params[:include_adult] = opts[:include_adult] unless opts[:include_adult].nil?
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:year] = opts[:year] unless opts[:year].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse2004'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_tv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Translations
    # Get the translations that belong to a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20046]
    def translations(person_id, opts = {})
      data, _status_code, _headers = translations_with_http_info(person_id, opts)
      data
    end

    # Translations
    # Get the translations that belong to a person.
    # @param person_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20046, Integer, Hash)>] InlineResponse20046 data, response status code and response headers
    def translations_with_http_info(person_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.translations ...' if @api_client.config.debugging
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        raise ArgumentError, "Missing the required parameter 'person_id' when calling DefaultApi.translations"
      end

      # resource path
      local_var_path = '/3/person/{person_id}/translations'.sub('{person_id}', person_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20046'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#translations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # All
    # Get the trending movies, TV shows and people.
    # @param time_window
    # @param [Hash] opts the optional parameters
    # @option opts [] :language &#x60;ISO-639-1&#x60;-&#x60;ISO-3166-1&#x60; code (default to en-US)
    # @return [InlineResponse20014]
    def trending_all(time_window, opts = {})
      data, _status_code, _headers = trending_all_with_http_info(time_window, opts)
      data
    end

    # All
    # Get the trending movies, TV shows and people.
    # @param time_window
    # @param [Hash] opts the optional parameters
    # @option opts [] :language &#x60;ISO-639-1&#x60;-&#x60;ISO-3166-1&#x60; code
    # @return [Array<(InlineResponse20014, Integer, Hash)>] InlineResponse20014 data, response status code and response headers
    def trending_all_with_http_info(time_window, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.trending_all ...' if @api_client.config.debugging
      # verify the required parameter 'time_window' is set
      if @api_client.config.client_side_validation && time_window.nil?
        raise ArgumentError, "Missing the required parameter 'time_window' when calling DefaultApi.trending_all"
      end

      # resource path
      local_var_path = '/3/trending/all/{time_window}'.sub('{time_window}', time_window.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20014'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#trending_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Movies
    # Get the trending movies on TMDB.
    # @param time_window
    # @param [Hash] opts the optional parameters
    # @option opts [] :language &#x60;ISO-639-1&#x60;-&#x60;ISO-3166-1&#x60; code (default to en-US)
    # @return [InlineResponse20014]
    def trending_movies(time_window, opts = {})
      data, _status_code, _headers = trending_movies_with_http_info(time_window, opts)
      data
    end

    # Movies
    # Get the trending movies on TMDB.
    # @param time_window
    # @param [Hash] opts the optional parameters
    # @option opts [] :language &#x60;ISO-639-1&#x60;-&#x60;ISO-3166-1&#x60; code
    # @return [Array<(InlineResponse20014, Integer, Hash)>] InlineResponse20014 data, response status code and response headers
    def trending_movies_with_http_info(time_window, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.trending_movies ...' if @api_client.config.debugging
      # verify the required parameter 'time_window' is set
      if @api_client.config.client_side_validation && time_window.nil?
        raise ArgumentError, "Missing the required parameter 'time_window' when calling DefaultApi.trending_movies"
      end

      # resource path
      local_var_path = '/3/trending/movie/{time_window}'.sub('{time_window}', time_window.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20014'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#trending_movies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # People
    # Get the trending people on TMDB.
    # @param time_window
    # @param [Hash] opts the optional parameters
    # @option opts [] :language &#x60;ISO-639-1&#x60;-&#x60;ISO-3166-1&#x60; code (default to en-US)
    # @return [InlineResponse20017]
    def trending_people(time_window, opts = {})
      data, _status_code, _headers = trending_people_with_http_info(time_window, opts)
      data
    end

    # People
    # Get the trending people on TMDB.
    # @param time_window
    # @param [Hash] opts the optional parameters
    # @option opts [] :language &#x60;ISO-639-1&#x60;-&#x60;ISO-3166-1&#x60; code
    # @return [Array<(InlineResponse20017, Integer, Hash)>] InlineResponse20017 data, response status code and response headers
    def trending_people_with_http_info(time_window, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.trending_people ...' if @api_client.config.debugging
      # verify the required parameter 'time_window' is set
      if @api_client.config.client_side_validation && time_window.nil?
        raise ArgumentError, "Missing the required parameter 'time_window' when calling DefaultApi.trending_people"
      end

      # resource path
      local_var_path = '/3/trending/person/{time_window}'.sub('{time_window}', time_window.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20017'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#trending_people\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # TV
    # Get the trending TV shows on TMDB.
    # @param time_window
    # @param [Hash] opts the optional parameters
    # @option opts [] :language &#x60;ISO-639-1&#x60;-&#x60;ISO-3166-1&#x60; code (default to en-US)
    # @return [InlineResponse20015]
    def trending_tv(time_window, opts = {})
      data, _status_code, _headers = trending_tv_with_http_info(time_window, opts)
      data
    end

    # TV
    # Get the trending TV shows on TMDB.
    # @param time_window
    # @param [Hash] opts the optional parameters
    # @option opts [] :language &#x60;ISO-639-1&#x60;-&#x60;ISO-3166-1&#x60; code
    # @return [Array<(InlineResponse20015, Integer, Hash)>] InlineResponse20015 data, response status code and response headers
    def trending_tv_with_http_info(time_window, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.trending_tv ...' if @api_client.config.debugging
      # verify the required parameter 'time_window' is set
      if @api_client.config.client_side_validation && time_window.nil?
        raise ArgumentError, "Missing the required parameter 'time_window' when calling DefaultApi.trending_tv"
      end

      # resource path
      local_var_path = '/3/trending/tv/{time_window}'.sub('{time_window}', time_window.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20015'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#trending_tv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Account States
    # Get the rating, watchlist and favourite status.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :session_id
    # @option opts [] :guest_session_id
    # @return [InlineResponse20016]
    def tv_episode_account_states(series_id, season_number, episode_number, opts = {})
      data, _status_code, _headers = tv_episode_account_states_with_http_info(series_id, season_number, episode_number,
                                                                              opts)
      data
    end

    # Account States
    # Get the rating, watchlist and favourite status.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :session_id
    # @option opts [] :guest_session_id
    # @return [Array<(InlineResponse20016, Integer, Hash)>] InlineResponse20016 data, response status code and response headers
    def tv_episode_account_states_with_http_info(series_id, season_number, episode_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_episode_account_states ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_episode_account_states"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'season_number' when calling DefaultApi.tv_episode_account_states"
      end
      # verify the required parameter 'episode_number' is set
      if @api_client.config.client_side_validation && episode_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'episode_number' when calling DefaultApi.tv_episode_account_states"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/account_states'.sub('{series_id}', series_id.to_s).sub('{season_number}', season_number.to_s).sub(
        '{episode_number}', episode_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?
      query_params[:guest_session_id] = opts[:guest_session_id] unless opts[:guest_session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20016'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_episode_account_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Add Rating
    # Rate a TV episode and save it to your rated list.
    # @param content_type
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [EpisodeNumberRatingBody] :body
    # @option opts [] :guest_session_id
    # @option opts [] :session_id
    # @return [InlineResponse20030]
    def tv_episode_add_rating(content_type, series_id, season_number, episode_number, opts = {})
      data, _status_code, _headers = tv_episode_add_rating_with_http_info(content_type, series_id, season_number,
                                                                          episode_number, opts)
      data
    end

    # Add Rating
    # Rate a TV episode and save it to your rated list.
    # @param content_type
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [EpisodeNumberRatingBody] :body
    # @option opts [] :guest_session_id
    # @option opts [] :session_id
    # @return [Array<(InlineResponse20030, Integer, Hash)>] InlineResponse20030 data, response status code and response headers
    def tv_episode_add_rating_with_http_info(content_type, series_id, season_number, episode_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_episode_add_rating ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        raise ArgumentError,
              "Missing the required parameter 'content_type' when calling DefaultApi.tv_episode_add_rating"
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_episode_add_rating"
      end

      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'season_number' when calling DefaultApi.tv_episode_add_rating"
      end
      # verify the required parameter 'episode_number' is set
      if @api_client.config.client_side_validation && episode_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'episode_number' when calling DefaultApi.tv_episode_add_rating"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating'.sub('{series_id}', series_id.to_s).sub('{season_number}', season_number.to_s).sub(
        '{episode_number}', episode_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:guest_session_id] = opts[:guest_session_id] unless opts[:guest_session_id].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InlineResponse20030'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_episode_add_rating\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Changes
    # Get the recent changes for a TV episode.
    # @param episode_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200124]
    def tv_episode_changes_by_id(episode_id, opts = {})
      data, _status_code, _headers = tv_episode_changes_by_id_with_http_info(episode_id, opts)
      data
    end

    # Changes
    # Get the recent changes for a TV episode.
    # @param episode_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200124, Integer, Hash)>] InlineResponse200124 data, response status code and response headers
    def tv_episode_changes_by_id_with_http_info(episode_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_episode_changes_by_id ...'
      end
      # verify the required parameter 'episode_id' is set
      if @api_client.config.client_side_validation && episode_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'episode_id' when calling DefaultApi.tv_episode_changes_by_id"
      end

      # resource path
      local_var_path = '/3/tv/episode/{episode_id}/changes'.sub('{episode_id}', episode_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200124'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_episode_changes_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Credits
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20079]
    def tv_episode_credits(series_id, season_number, episode_number, opts = {})
      data, _status_code, _headers = tv_episode_credits_with_http_info(series_id, season_number, episode_number, opts)
      data
    end

    # Credits
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse20079, Integer, Hash)>] InlineResponse20079 data, response status code and response headers
    def tv_episode_credits_with_http_info(series_id, season_number, episode_number, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_episode_credits ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_episode_credits"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError, "Missing the required parameter 'season_number' when calling DefaultApi.tv_episode_credits"
      end

      # verify the required parameter 'episode_number' is set
      if @api_client.config.client_side_validation && episode_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'episode_number' when calling DefaultApi.tv_episode_credits"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/credits'.sub('{series_id}', series_id.to_s).sub('{season_number}', season_number.to_s).sub(
        '{episode_number}', episode_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20079'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_episode_credits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Rating
    # Delete your rating on a TV episode.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :content_type  (default to application/json;charset=utf-8)
    # @option opts [] :guest_session_id
    # @option opts [] :session_id
    # @return [InlineResponse20031]
    def tv_episode_delete_rating(series_id, season_number, episode_number, opts = {})
      data, _status_code, _headers = tv_episode_delete_rating_with_http_info(series_id, season_number, episode_number,
                                                                             opts)
      data
    end

    # Delete Rating
    # Delete your rating on a TV episode.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :content_type
    # @option opts [] :guest_session_id
    # @option opts [] :session_id
    # @return [Array<(InlineResponse20031, Integer, Hash)>] InlineResponse20031 data, response status code and response headers
    def tv_episode_delete_rating_with_http_info(series_id, season_number, episode_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_episode_delete_rating ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_episode_delete_rating"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'season_number' when calling DefaultApi.tv_episode_delete_rating"
      end
      # verify the required parameter 'episode_number' is set
      if @api_client.config.client_side_validation && episode_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'episode_number' when calling DefaultApi.tv_episode_delete_rating"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating'.sub('{series_id}', series_id.to_s).sub('{season_number}', season_number.to_s).sub(
        '{episode_number}', episode_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:guest_session_id] = opts[:guest_session_id] unless opts[:guest_session_id].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = opts[:content_type] unless opts[:content_type].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20031'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_episode_delete_rating\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # Query the details of a TV episode.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :append_to_response comma separated list of endpoints within this namespace, 20 items max
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse2009]
    def tv_episode_details(series_id, season_number, episode_number, opts = {})
      data, _status_code, _headers = tv_episode_details_with_http_info(series_id, season_number, episode_number, opts)
      data
    end

    # Details
    # Query the details of a TV episode.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :append_to_response comma separated list of endpoints within this namespace, 20 items max
    # @option opts [] :language
    # @return [Array<(InlineResponse2009, Integer, Hash)>] InlineResponse2009 data, response status code and response headers
    def tv_episode_details_with_http_info(series_id, season_number, episode_number, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_episode_details ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_episode_details"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError, "Missing the required parameter 'season_number' when calling DefaultApi.tv_episode_details"
      end

      # verify the required parameter 'episode_number' is set
      if @api_client.config.client_side_validation && episode_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'episode_number' when calling DefaultApi.tv_episode_details"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}'.sub('{series_id}', series_id.to_s).sub('{season_number}', season_number.to_s).sub(
        '{episode_number}', episode_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:append_to_response] = opts[:append_to_response] unless opts[:append_to_response].nil?
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse2009'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_episode_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # External IDs
    # Get a list of external IDs that have been added to a TV episode.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20080]
    def tv_episode_external_ids(series_id, season_number, episode_number, opts = {})
      data, _status_code, _headers = tv_episode_external_ids_with_http_info(series_id, season_number, episode_number,
                                                                            opts)
      data
    end

    # External IDs
    # Get a list of external IDs that have been added to a TV episode.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20080, Integer, Hash)>] InlineResponse20080 data, response status code and response headers
    def tv_episode_external_ids_with_http_info(series_id, season_number, episode_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_episode_external_ids ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_episode_external_ids"
      end

      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'season_number' when calling DefaultApi.tv_episode_external_ids"
      end
      # verify the required parameter 'episode_number' is set
      if @api_client.config.client_side_validation && episode_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'episode_number' when calling DefaultApi.tv_episode_external_ids"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/external_ids'.sub('{series_id}', series_id.to_s).sub('{season_number}', season_number.to_s).sub(
        '{episode_number}', episode_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20080'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_episode_external_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # Get the details of a TV episode group.
    # @param tv_episode_group_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200125]
    def tv_episode_group_details(tv_episode_group_id, opts = {})
      data, _status_code, _headers = tv_episode_group_details_with_http_info(tv_episode_group_id, opts)
      data
    end

    # Details
    # Get the details of a TV episode group.
    # @param tv_episode_group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200125, Integer, Hash)>] InlineResponse200125 data, response status code and response headers
    def tv_episode_group_details_with_http_info(tv_episode_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_episode_group_details ...'
      end
      # verify the required parameter 'tv_episode_group_id' is set
      if @api_client.config.client_side_validation && tv_episode_group_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'tv_episode_group_id' when calling DefaultApi.tv_episode_group_details"
      end

      # resource path
      local_var_path = '/3/tv/episode_group/{tv_episode_group_id}'.sub('{tv_episode_group_id}',
                                                                       tv_episode_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200125'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_episode_group_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Images
    # Get the images that belong to a TV episode.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_image_language specify a comma separated list of ISO-639-1 values to query, for example: &#x60;en,null&#x60;
    # @option opts [] :language
    # @return [InlineResponse20013]
    def tv_episode_images(series_id, season_number, episode_number, opts = {})
      data, _status_code, _headers = tv_episode_images_with_http_info(series_id, season_number, episode_number, opts)
      data
    end

    # Images
    # Get the images that belong to a TV episode.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_image_language specify a comma separated list of ISO-639-1 values to query, for example: &#x60;en,null&#x60;
    # @option opts [] :language
    # @return [Array<(InlineResponse20013, Integer, Hash)>] InlineResponse20013 data, response status code and response headers
    def tv_episode_images_with_http_info(series_id, season_number, episode_number, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_episode_images ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_episode_images"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError, "Missing the required parameter 'season_number' when calling DefaultApi.tv_episode_images"
      end
      # verify the required parameter 'episode_number' is set
      if @api_client.config.client_side_validation && episode_number.nil?
        raise ArgumentError, "Missing the required parameter 'episode_number' when calling DefaultApi.tv_episode_images"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/images'.sub('{series_id}', series_id.to_s).sub('{season_number}', season_number.to_s).sub(
        '{episode_number}', episode_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:include_image_language].nil?
        query_params[:include_image_language] =
          opts[:include_image_language]
      end
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20013'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_episode_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Translations
    # Get the translations that have been added to a TV episode.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20081]
    def tv_episode_translations(series_id, season_number, episode_number, opts = {})
      data, _status_code, _headers = tv_episode_translations_with_http_info(series_id, season_number, episode_number,
                                                                            opts)
      data
    end

    # Translations
    # Get the translations that have been added to a TV episode.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20081, Integer, Hash)>] InlineResponse20081 data, response status code and response headers
    def tv_episode_translations_with_http_info(series_id, season_number, episode_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_episode_translations ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_episode_translations"
      end

      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'season_number' when calling DefaultApi.tv_episode_translations"
      end
      # verify the required parameter 'episode_number' is set
      if @api_client.config.client_side_validation && episode_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'episode_number' when calling DefaultApi.tv_episode_translations"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/translations'.sub('{series_id}', series_id.to_s).sub('{season_number}', season_number.to_s).sub(
        '{episode_number}', episode_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20081'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_episode_translations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Videos
    # Get the videos that belong to a TV episode.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_video_language filter the list results by language, supports more than one value by using a comma
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20078]
    def tv_episode_videos(series_id, season_number, episode_number, opts = {})
      data, _status_code, _headers = tv_episode_videos_with_http_info(series_id, season_number, episode_number, opts)
      data
    end

    # Videos
    # Get the videos that belong to a TV episode.
    # @param series_id
    # @param season_number
    # @param episode_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_video_language filter the list results by language, supports more than one value by using a comma
    # @option opts [] :language
    # @return [Array<(InlineResponse20078, Integer, Hash)>] InlineResponse20078 data, response status code and response headers
    def tv_episode_videos_with_http_info(series_id, season_number, episode_number, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_episode_videos ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_episode_videos"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError, "Missing the required parameter 'season_number' when calling DefaultApi.tv_episode_videos"
      end
      # verify the required parameter 'episode_number' is set
      if @api_client.config.client_side_validation && episode_number.nil?
        raise ArgumentError, "Missing the required parameter 'episode_number' when calling DefaultApi.tv_episode_videos"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/videos'.sub('{series_id}', series_id.to_s).sub('{season_number}', season_number.to_s).sub(
        '{episode_number}', episode_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:include_video_language].nil?
        query_params[:include_video_language] =
          opts[:include_video_language]
      end
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20078'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_episode_videos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Account States
    # Get the rating, watchlist and favourite status.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :session_id
    # @option opts [] :guest_session_id
    # @return [InlineResponse20072]
    def tv_season_account_states(series_id, season_number, opts = {})
      data, _status_code, _headers = tv_season_account_states_with_http_info(series_id, season_number, opts)
      data
    end

    # Account States
    # Get the rating, watchlist and favourite status.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :session_id
    # @option opts [] :guest_session_id
    # @return [Array<(InlineResponse20072, Integer, Hash)>] InlineResponse20072 data, response status code and response headers
    def tv_season_account_states_with_http_info(series_id, season_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_season_account_states ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_season_account_states"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'season_number' when calling DefaultApi.tv_season_account_states"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/account_states'.sub('{series_id}', series_id.to_s).sub(
        '{season_number}', season_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?
      query_params[:guest_session_id] = opts[:guest_session_id] unless opts[:guest_session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20072'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_season_account_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Aggregate Credits
    # Get the aggregate credits (cast and crew) that have been added to a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20073]
    def tv_season_aggregate_credits(series_id, season_number, opts = {})
      data, _status_code, _headers = tv_season_aggregate_credits_with_http_info(series_id, season_number, opts)
      data
    end

    # Aggregate Credits
    # Get the aggregate credits (cast and crew) that have been added to a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse20073, Integer, Hash)>] InlineResponse20073 data, response status code and response headers
    def tv_season_aggregate_credits_with_http_info(series_id, season_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_season_aggregate_credits ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_season_aggregate_credits"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'season_number' when calling DefaultApi.tv_season_aggregate_credits"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/aggregate_credits'.sub('{series_id}', series_id.to_s).sub(
        '{season_number}', season_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20073'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_season_aggregate_credits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Changes
    # Get the recent changes for a TV season.
    # @param season_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page  (default to 1)
    # @option opts [] :start_date
    # @return [InlineResponse20074]
    def tv_season_changes_by_id(season_id, opts = {})
      data, _status_code, _headers = tv_season_changes_by_id_with_http_info(season_id, opts)
      data
    end

    # Changes
    # Get the recent changes for a TV season.
    # @param season_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page
    # @option opts [] :start_date
    # @return [Array<(InlineResponse20074, Integer, Hash)>] InlineResponse20074 data, response status code and response headers
    def tv_season_changes_by_id_with_http_info(season_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_season_changes_by_id ...'
      end
      # verify the required parameter 'season_id' is set
      if @api_client.config.client_side_validation && season_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'season_id' when calling DefaultApi.tv_season_changes_by_id"
      end

      # resource path
      local_var_path = '/3/tv/season/{season_id}/changes'.sub('{season_id}', season_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:end_date] = opts[:end_date] unless opts[:end_date].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:start_date] = opts[:start_date] unless opts[:start_date].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20074'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_season_changes_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Credits
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20075]
    def tv_season_credits(series_id, season_number, opts = {})
      data, _status_code, _headers = tv_season_credits_with_http_info(series_id, season_number, opts)
      data
    end

    # Credits
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse20075, Integer, Hash)>] InlineResponse20075 data, response status code and response headers
    def tv_season_credits_with_http_info(series_id, season_number, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_season_credits ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_season_credits"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError, "Missing the required parameter 'season_number' when calling DefaultApi.tv_season_credits"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/credits'.sub('{series_id}', series_id.to_s).sub(
        '{season_number}', season_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20075'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_season_credits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # Query the details of a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :append_to_response comma separated list of endpoints within this namespace, 20 items max
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse2008]
    def tv_season_details(series_id, season_number, opts = {})
      data, _status_code, _headers = tv_season_details_with_http_info(series_id, season_number, opts)
      data
    end

    # Details
    # Query the details of a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :append_to_response comma separated list of endpoints within this namespace, 20 items max
    # @option opts [] :language
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def tv_season_details_with_http_info(series_id, season_number, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_season_details ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_season_details"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError, "Missing the required parameter 'season_number' when calling DefaultApi.tv_season_details"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}'.sub('{series_id}', series_id.to_s).sub(
        '{season_number}', season_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:append_to_response] = opts[:append_to_response] unless opts[:append_to_response].nil?
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse2008'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_season_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # External IDs
    # Get a list of external IDs that have been added to a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20076]
    def tv_season_external_ids(series_id, season_number, opts = {})
      data, _status_code, _headers = tv_season_external_ids_with_http_info(series_id, season_number, opts)
      data
    end

    # External IDs
    # Get a list of external IDs that have been added to a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20076, Integer, Hash)>] InlineResponse20076 data, response status code and response headers
    def tv_season_external_ids_with_http_info(series_id, season_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_season_external_ids ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_season_external_ids"
      end

      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'season_number' when calling DefaultApi.tv_season_external_ids"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/external_ids'.sub('{series_id}', series_id.to_s).sub(
        '{season_number}', season_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20076'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_season_external_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Images
    # Get the images that belong to a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_image_language specify a comma separated list of ISO-639-1 values to query, for example: &#x60;en,null&#x60;
    # @option opts [] :language
    # @return [InlineResponse20012]
    def tv_season_images(series_id, season_number, opts = {})
      data, _status_code, _headers = tv_season_images_with_http_info(series_id, season_number, opts)
      data
    end

    # Images
    # Get the images that belong to a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_image_language specify a comma separated list of ISO-639-1 values to query, for example: &#x60;en,null&#x60;
    # @option opts [] :language
    # @return [Array<(InlineResponse20012, Integer, Hash)>] InlineResponse20012 data, response status code and response headers
    def tv_season_images_with_http_info(series_id, season_number, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_season_images ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_season_images"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError, "Missing the required parameter 'season_number' when calling DefaultApi.tv_season_images"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/images'.sub('{series_id}', series_id.to_s).sub(
        '{season_number}', season_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:include_image_language].nil?
        query_params[:include_image_language] =
          opts[:include_image_language]
      end
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20012'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_season_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Translations
    # Get the translations for a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20077]
    def tv_season_translations(series_id, season_number, opts = {})
      data, _status_code, _headers = tv_season_translations_with_http_info(series_id, season_number, opts)
      data
    end

    # Translations
    # Get the translations for a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20077, Integer, Hash)>] InlineResponse20077 data, response status code and response headers
    def tv_season_translations_with_http_info(series_id, season_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_season_translations ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_season_translations"
      end

      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'season_number' when calling DefaultApi.tv_season_translations"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/translations'.sub('{series_id}', series_id.to_s).sub(
        '{season_number}', season_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20077'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_season_translations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Videos
    # Get the videos that belong to a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_video_language filter the list results by language, supports more than one value by using a comma
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20078]
    def tv_season_videos(series_id, season_number, opts = {})
      data, _status_code, _headers = tv_season_videos_with_http_info(series_id, season_number, opts)
      data
    end

    # Videos
    # Get the videos that belong to a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_video_language filter the list results by language, supports more than one value by using a comma
    # @option opts [] :language
    # @return [Array<(InlineResponse20078, Integer, Hash)>] InlineResponse20078 data, response status code and response headers
    def tv_season_videos_with_http_info(series_id, season_number, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_season_videos ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_season_videos"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError, "Missing the required parameter 'season_number' when calling DefaultApi.tv_season_videos"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/videos'.sub('{series_id}', series_id.to_s).sub(
        '{season_number}', season_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:include_video_language].nil?
        query_params[:include_video_language] =
          opts[:include_video_language]
      end
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20078'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_season_videos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Watch Providers
    # Get the list of streaming providers we have for a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse200121]
    def tv_season_watch_providers(series_id, season_number, opts = {})
      data, _status_code, _headers = tv_season_watch_providers_with_http_info(series_id, season_number, opts)
      data
    end

    # Watch Providers
    # Get the list of streaming providers we have for a TV season.
    # @param series_id
    # @param season_number
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse200121, Integer, Hash)>] InlineResponse200121 data, response status code and response headers
    def tv_season_watch_providers_with_http_info(series_id, season_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_season_watch_providers ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_season_watch_providers"
      end
      # verify the required parameter 'season_number' is set
      if @api_client.config.client_side_validation && season_number.nil?
        raise ArgumentError,
              "Missing the required parameter 'season_number' when calling DefaultApi.tv_season_watch_providers"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/season/{season_number}/watch/providers'.sub('{series_id}', series_id.to_s).sub(
        '{season_number}', season_number.to_s
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200121'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_season_watch_providers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Account States
    # Get the rating, watchlist and favourite status.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :session_id
    # @option opts [] :guest_session_id
    # @return [InlineResponse20016]
    def tv_series_account_states(series_id, opts = {})
      data, _status_code, _headers = tv_series_account_states_with_http_info(series_id, opts)
      data
    end

    # Account States
    # Get the rating, watchlist and favourite status.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :session_id
    # @option opts [] :guest_session_id
    # @return [Array<(InlineResponse20016, Integer, Hash)>] InlineResponse20016 data, response status code and response headers
    def tv_series_account_states_with_http_info(series_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_account_states ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_account_states"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/account_states'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?
      query_params[:guest_session_id] = opts[:guest_session_id] unless opts[:guest_session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20016'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_account_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Add Rating
    # Rate a TV show and save it to your rated list.
    # @param content_type
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [SeriesIdRatingBody] :body
    # @option opts [] :guest_session_id
    # @option opts [] :session_id
    # @return [InlineResponse20030]
    def tv_series_add_rating(content_type, series_id, opts = {})
      data, _status_code, _headers = tv_series_add_rating_with_http_info(content_type, series_id, opts)
      data
    end

    # Add Rating
    # Rate a TV show and save it to your rated list.
    # @param content_type
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [SeriesIdRatingBody] :body
    # @option opts [] :guest_session_id
    # @option opts [] :session_id
    # @return [Array<(InlineResponse20030, Integer, Hash)>] InlineResponse20030 data, response status code and response headers
    def tv_series_add_rating_with_http_info(content_type, series_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_add_rating ...' if @api_client.config.debugging
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        raise ArgumentError,
              "Missing the required parameter 'content_type' when calling DefaultApi.tv_series_add_rating"
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_add_rating"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/rating'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:guest_session_id] = opts[:guest_session_id] unless opts[:guest_session_id].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:return_type] || 'InlineResponse20030'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_add_rating\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Aggregate Credits
    # Get the aggregate credits (cast and crew) that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20058]
    def tv_series_aggregate_credits(series_id, opts = {})
      data, _status_code, _headers = tv_series_aggregate_credits_with_http_info(series_id, opts)
      data
    end

    # Aggregate Credits
    # Get the aggregate credits (cast and crew) that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse20058, Integer, Hash)>] InlineResponse20058 data, response status code and response headers
    def tv_series_aggregate_credits_with_http_info(series_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_aggregate_credits ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_aggregate_credits"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/aggregate_credits'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20058'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_aggregate_credits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Airing Today
    # Get a list of TV shows airing today.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :timezone
    # @return [InlineResponse20052]
    def tv_series_airing_today_list(opts = {})
      data, _status_code, _headers = tv_series_airing_today_list_with_http_info(opts)
      data
    end

    # Airing Today
    # Get a list of TV shows airing today.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :timezone
    # @return [Array<(InlineResponse20052, Integer, Hash)>] InlineResponse20052 data, response status code and response headers
    def tv_series_airing_today_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_airing_today_list ...'
      end
      # resource path
      local_var_path = '/3/tv/airing_today'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:timezone] = opts[:timezone] unless opts[:timezone].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20052'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_airing_today_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Alternative Titles
    # Get the alternative titles that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20059]
    def tv_series_alternative_titles(series_id, opts = {})
      data, _status_code, _headers = tv_series_alternative_titles_with_http_info(series_id, opts)
      data
    end

    # Alternative Titles
    # Get the alternative titles that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20059, Integer, Hash)>] InlineResponse20059 data, response status code and response headers
    def tv_series_alternative_titles_with_http_info(series_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_alternative_titles ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_alternative_titles"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/alternative_titles'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20059'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_alternative_titles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Changes
    # Get the recent changes for a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page  (default to 1)
    # @option opts [] :start_date
    # @return [InlineResponse20040]
    def tv_series_changes(series_id, opts = {})
      data, _status_code, _headers = tv_series_changes_with_http_info(series_id, opts)
      data
    end

    # Changes
    # Get the recent changes for a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :end_date
    # @option opts [] :page
    # @option opts [] :start_date
    # @return [Array<(InlineResponse20040, Integer, Hash)>] InlineResponse20040 data, response status code and response headers
    def tv_series_changes_with_http_info(series_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_changes ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_changes"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/changes'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:end_date] = opts[:end_date] unless opts[:end_date].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:start_date] = opts[:start_date] unless opts[:start_date].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20040'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Content Ratings
    # Get the content ratings that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20060]
    def tv_series_content_ratings(series_id, opts = {})
      data, _status_code, _headers = tv_series_content_ratings_with_http_info(series_id, opts)
      data
    end

    # Content Ratings
    # Get the content ratings that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20060, Integer, Hash)>] InlineResponse20060 data, response status code and response headers
    def tv_series_content_ratings_with_http_info(series_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_content_ratings ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_content_ratings"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/content_ratings'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20060'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_content_ratings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Credits
    # Get the latest season credits of a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20061]
    def tv_series_credits(series_id, opts = {})
      data, _status_code, _headers = tv_series_credits_with_http_info(series_id, opts)
      data
    end

    # Credits
    # Get the latest season credits of a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse20061, Integer, Hash)>] InlineResponse20061 data, response status code and response headers
    def tv_series_credits_with_http_info(series_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_credits ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_credits"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/credits'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20061'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_credits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Rating
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :content_type  (default to application/json;charset=utf-8)
    # @option opts [] :guest_session_id
    # @option opts [] :session_id
    # @return [InlineResponse20031]
    def tv_series_delete_rating(series_id, opts = {})
      data, _status_code, _headers = tv_series_delete_rating_with_http_info(series_id, opts)
      data
    end

    # Delete Rating
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :content_type
    # @option opts [] :guest_session_id
    # @option opts [] :session_id
    # @return [Array<(InlineResponse20031, Integer, Hash)>] InlineResponse20031 data, response status code and response headers
    def tv_series_delete_rating_with_http_info(series_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_delete_rating ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_delete_rating"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/rating'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:guest_session_id] = opts[:guest_session_id] unless opts[:guest_session_id].nil?
      query_params[:session_id] = opts[:session_id] unless opts[:session_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = opts[:content_type] unless opts[:content_type].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20031'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_delete_rating\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Details
    # Get the details of a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :append_to_response comma separated list of endpoints within this namespace, 20 items max
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse2003]
    def tv_series_details(series_id, opts = {})
      data, _status_code, _headers = tv_series_details_with_http_info(series_id, opts)
      data
    end

    # Details
    # Get the details of a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :append_to_response comma separated list of endpoints within this namespace, 20 items max
    # @option opts [] :language
    # @return [Array<(InlineResponse2003, Integer, Hash)>] InlineResponse2003 data, response status code and response headers
    def tv_series_details_with_http_info(series_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_details ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_details"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:append_to_response] = opts[:append_to_response] unless opts[:append_to_response].nil?
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse2003'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Episode Groups
    # Get the episode groups that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20062]
    def tv_series_episode_groups(series_id, opts = {})
      data, _status_code, _headers = tv_series_episode_groups_with_http_info(series_id, opts)
      data
    end

    # Episode Groups
    # Get the episode groups that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20062, Integer, Hash)>] InlineResponse20062 data, response status code and response headers
    def tv_series_episode_groups_with_http_info(series_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_episode_groups ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_episode_groups"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/episode_groups'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20062'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_episode_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # External IDs
    # Get a list of external IDs that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20063]
    def tv_series_external_ids(series_id, opts = {})
      data, _status_code, _headers = tv_series_external_ids_with_http_info(series_id, opts)
      data
    end

    # External IDs
    # Get a list of external IDs that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20063, Integer, Hash)>] InlineResponse20063 data, response status code and response headers
    def tv_series_external_ids_with_http_info(series_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_external_ids ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_external_ids"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/external_ids'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20063'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_external_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Images
    # Get the images that belong to a TV series.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_image_language specify a comma separated list of ISO-639-1 values to query, for example: &#x60;en,null&#x60;
    # @option opts [] :language
    # @return [InlineResponse20011]
    def tv_series_images(series_id, opts = {})
      data, _status_code, _headers = tv_series_images_with_http_info(series_id, opts)
      data
    end

    # Images
    # Get the images that belong to a TV series.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_image_language specify a comma separated list of ISO-639-1 values to query, for example: &#x60;en,null&#x60;
    # @option opts [] :language
    # @return [Array<(InlineResponse20011, Integer, Hash)>] InlineResponse20011 data, response status code and response headers
    def tv_series_images_with_http_info(series_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_images ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_images"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/images'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:include_image_language].nil?
        query_params[:include_image_language] =
          opts[:include_image_language]
      end
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20011'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Keywords
    # Get a list of keywords that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20064]
    def tv_series_keywords(series_id, opts = {})
      data, _status_code, _headers = tv_series_keywords_with_http_info(series_id, opts)
      data
    end

    # Keywords
    # Get a list of keywords that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20064, Integer, Hash)>] InlineResponse20064 data, response status code and response headers
    def tv_series_keywords_with_http_info(series_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_keywords ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_keywords"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/keywords'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20064'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_keywords\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Latest
    # Get the newest TV show ID.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20057]
    def tv_series_latest_id(opts = {})
      data, _status_code, _headers = tv_series_latest_id_with_http_info(opts)
      data
    end

    # Latest
    # Get the newest TV show ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20057, Integer, Hash)>] InlineResponse20057 data, response status code and response headers
    def tv_series_latest_id_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_latest_id ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/3/tv/latest'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20057'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_latest_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # On The Air
    # Get a list of TV shows that air in the next 7 days.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @option opts [] :timezone
    # @return [InlineResponse20053]
    def tv_series_on_the_air_list(opts = {})
      data, _status_code, _headers = tv_series_on_the_air_list_with_http_info(opts)
      data
    end

    # On The Air
    # Get a list of TV shows that air in the next 7 days.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @option opts [] :timezone
    # @return [Array<(InlineResponse20053, Integer, Hash)>] InlineResponse20053 data, response status code and response headers
    def tv_series_on_the_air_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_on_the_air_list ...'
      end
      # resource path
      local_var_path = '/3/tv/on_the_air'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:timezone] = opts[:timezone] unless opts[:timezone].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20053'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_on_the_air_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Popular
    # Get a list of TV shows ordered by popularity.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse20054]
    def tv_series_popular_list(opts = {})
      data, _status_code, _headers = tv_series_popular_list_with_http_info(opts)
      data
    end

    # Popular
    # Get a list of TV shows ordered by popularity.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse20054, Integer, Hash)>] InlineResponse20054 data, response status code and response headers
    def tv_series_popular_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_popular_list ...'
      end
      # resource path
      local_var_path = '/3/tv/popular'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20054'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_popular_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Recommendations
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse20065]
    def tv_series_recommendations(series_id, opts = {})
      data, _status_code, _headers = tv_series_recommendations_with_http_info(series_id, opts)
      data
    end

    # Recommendations
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse20065, Integer, Hash)>] InlineResponse20065 data, response status code and response headers
    def tv_series_recommendations_with_http_info(series_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_recommendations ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_recommendations"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/recommendations'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20065'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_recommendations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Reviews
    # Get the reviews that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse20066]
    def tv_series_reviews(series_id, opts = {})
      data, _status_code, _headers = tv_series_reviews_with_http_info(series_id, opts)
      data
    end

    # Reviews
    # Get the reviews that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse20066, Integer, Hash)>] InlineResponse20066 data, response status code and response headers
    def tv_series_reviews_with_http_info(series_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_reviews ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_reviews"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/reviews'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20066'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_reviews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Screened Theatrically
    # Get the seasons and episodes that have screened theatrically.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20067]
    def tv_series_screened_theatrically(series_id, opts = {})
      data, _status_code, _headers = tv_series_screened_theatrically_with_http_info(series_id, opts)
      data
    end

    # Screened Theatrically
    # Get the seasons and episodes that have screened theatrically.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20067, Integer, Hash)>] InlineResponse20067 data, response status code and response headers
    def tv_series_screened_theatrically_with_http_info(series_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_screened_theatrically ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_screened_theatrically"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/screened_theatrically'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20067'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_screened_theatrically\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Similar
    # Get the similar TV shows.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse20068]
    def tv_series_similar(series_id, opts = {})
      data, _status_code, _headers = tv_series_similar_with_http_info(series_id, opts)
      data
    end

    # Similar
    # Get the similar TV shows.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse20068, Integer, Hash)>] InlineResponse20068 data, response status code and response headers
    def tv_series_similar_with_http_info(series_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_similar ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_similar"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/similar'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20068'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_similar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Top Rated
    # Get a list of TV shows ordered by rating.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse20055]
    def tv_series_top_rated_list(opts = {})
      data, _status_code, _headers = tv_series_top_rated_list_with_http_info(opts)
      data
    end

    # Top Rated
    # Get a list of TV shows ordered by rating.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :page
    # @return [Array<(InlineResponse20055, Integer, Hash)>] InlineResponse20055 data, response status code and response headers
    def tv_series_top_rated_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_top_rated_list ...'
      end
      # resource path
      local_var_path = '/3/tv/top_rated'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20055'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_top_rated_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Translations
    # Get the translations that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20069]
    def tv_series_translations(series_id, opts = {})
      data, _status_code, _headers = tv_series_translations_with_http_info(series_id, opts)
      data
    end

    # Translations
    # Get the translations that have been added to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20069, Integer, Hash)>] InlineResponse20069 data, response status code and response headers
    def tv_series_translations_with_http_info(series_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_translations ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_translations"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/translations'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20069'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_translations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Videos
    # Get the videos that belong to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_video_language filter the list results by language, supports more than one value by using a comma
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20070]
    def tv_series_videos(series_id, opts = {})
      data, _status_code, _headers = tv_series_videos_with_http_info(series_id, opts)
      data
    end

    # Videos
    # Get the videos that belong to a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @option opts [] :include_video_language filter the list results by language, supports more than one value by using a comma
    # @option opts [] :language
    # @return [Array<(InlineResponse20070, Integer, Hash)>] InlineResponse20070 data, response status code and response headers
    def tv_series_videos_with_http_info(series_id, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_videos ...' if @api_client.config.debugging
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError, "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_videos"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/videos'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:include_video_language].nil?
        query_params[:include_video_language] =
          opts[:include_video_language]
      end
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20070'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_videos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Watch Providers
    # Get the list of streaming providers we have for a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20071]
    def tv_series_watch_providers(series_id, opts = {})
      data, _status_code, _headers = tv_series_watch_providers_with_http_info(series_id, opts)
      data
    end

    # Watch Providers
    # Get the list of streaming providers we have for a TV show.
    # @param series_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20071, Integer, Hash)>] InlineResponse20071 data, response status code and response headers
    def tv_series_watch_providers_with_http_info(series_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tv_series_watch_providers ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'series_id' when calling DefaultApi.tv_series_watch_providers"
      end

      # resource path
      local_var_path = '/3/tv/{series_id}/watch/providers'.sub('{series_id}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse20071'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tv_series_watch_providers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # TV Providers
    # Get the list of streaming providers we have for TV shows.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :watch_region
    # @return [InlineResponse200109]
    def watch_provider_tv_list(opts = {})
      data, _status_code, _headers = watch_provider_tv_list_with_http_info(opts)
      data
    end

    # TV Providers
    # Get the list of streaming providers we have for TV shows.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :watch_region
    # @return [Array<(InlineResponse200109, Integer, Hash)>] InlineResponse200109 data, response status code and response headers
    def watch_provider_tv_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.watch_provider_tv_list ...'
      end
      # resource path
      local_var_path = '/3/watch/providers/tv'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:watch_region] = opts[:watch_region] unless opts[:watch_region].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200109'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#watch_provider_tv_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Available Regions
    # Get the list of the countries we have watch provider (OTT/streaming) data for.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse200108]
    def watch_providers_available_regions(opts = {})
      data, _status_code, _headers = watch_providers_available_regions_with_http_info(opts)
      data
    end

    # Available Regions
    # Get the list of the countries we have watch provider (OTT/streaming) data for.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @return [Array<(InlineResponse200108, Integer, Hash)>] InlineResponse200108 data, response status code and response headers
    def watch_providers_available_regions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.watch_providers_available_regions ...'
      end
      # resource path
      local_var_path = '/3/watch/providers/regions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200108'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#watch_providers_available_regions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Movie Providers
    # Get the list of streaming providers we have for movies.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :watch_region
    # @return [InlineResponse200109]
    def watch_providers_movie_list(opts = {})
      data, _status_code, _headers = watch_providers_movie_list_with_http_info(opts)
      data
    end

    # Movie Providers
    # Get the list of streaming providers we have for movies.
    # @param [Hash] opts the optional parameters
    # @option opts [] :language
    # @option opts [] :watch_region
    # @return [Array<(InlineResponse200109, Integer, Hash)>] InlineResponse200109 data, response status code and response headers
    def watch_providers_movie_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.watch_providers_movie_list ...'
      end
      # resource path
      local_var_path = '/3/watch/providers/movie'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:language] = opts[:language] unless opts[:language].nil?
      query_params[:watch_region] = opts[:watch_region] unless opts[:watch_region].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type] || 'InlineResponse200109'

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        header_params:,
                                                        query_params:,
                                                        form_params:,
                                                        body: post_body,
                                                        auth_names:,
                                                        return_type:)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#watch_providers_movie_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
