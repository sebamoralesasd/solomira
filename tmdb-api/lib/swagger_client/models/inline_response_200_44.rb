# frozen_string_literal: true

# #TMDB API
#
# No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
#
# OpenAPI spec version: 3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 3.0.54

require 'date'

module SwaggerClient
  class InlineResponse20044
    attr_accessor :id, :freebase_mid, :freebase_id, :imdb_id, :tvrage_id, :wikidata_id, :facebook_id, :instagram_id,
                  :tiktok_id, :twitter_id, :youtube_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'id': :id,
        'freebase_mid': :freebase_mid,
        'freebase_id': :freebase_id,
        'imdb_id': :imdb_id,
        'tvrage_id': :tvrage_id,
        'wikidata_id': :wikidata_id,
        'facebook_id': :facebook_id,
        'instagram_id': :instagram_id,
        'tiktok_id': :tiktok_id,
        'twitter_id': :twitter_id,
        'youtube_id': :youtube_id
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'id': :Object,
        'freebase_mid': :Object,
        'freebase_id': :Object,
        'imdb_id': :Object,
        'tvrage_id': :Object,
        'wikidata_id': :Object,
        'facebook_id': :Object,
        'instagram_id': :Object,
        'tiktok_id': :Object,
        'twitter_id': :Object,
        'youtube_id': :Object
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `SwaggerClient::InlineResponse20044` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `SwaggerClient::InlineResponse20044`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.freebase_mid = attributes[:freebase_mid] if attributes.key?(:freebase_mid)

      self.freebase_id = attributes[:freebase_id] if attributes.key?(:freebase_id)

      self.imdb_id = attributes[:imdb_id] if attributes.key?(:imdb_id)

      self.tvrage_id = attributes[:tvrage_id] if attributes.key?(:tvrage_id)

      self.wikidata_id = attributes[:wikidata_id] if attributes.key?(:wikidata_id)

      self.facebook_id = attributes[:facebook_id] if attributes.key?(:facebook_id)

      self.instagram_id = attributes[:instagram_id] if attributes.key?(:instagram_id)

      self.tiktok_id = attributes[:tiktok_id] if attributes.key?(:tiktok_id)

      self.twitter_id = attributes[:twitter_id] if attributes.key?(:twitter_id)

      return unless attributes.key?(:youtube_id)

      self.youtube_id = attributes[:youtube_id]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        freebase_mid == other.freebase_mid &&
        freebase_id == other.freebase_id &&
        imdb_id == other.imdb_id &&
        tvrage_id == other.tvrage_id &&
        wikidata_id == other.wikidata_id &&
        facebook_id == other.facebook_id &&
        instagram_id == other.instagram_id &&
        tiktok_id == other.tiktok_id &&
        twitter_id == other.twitter_id &&
        youtube_id == other.youtube_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, freebase_mid, freebase_id, imdb_id, tvrage_id, wikidata_id, facebook_id, instagram_id, tiktok_id,
       twitter_id, youtube_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                              _deserialize(::Regexp.last_match(1), v)
                            end)
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end end
end
