# frozen_string_literal: true

# #TMDB API
#
# No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
#
# OpenAPI spec version: 3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 3.0.54

require 'date'

module SwaggerClient
  class InlineResponse200102Media
    attr_accessor :adult, :backdrop_path, :id, :name, :original_language, :original_name, :overview, :poster_path,
                  :media_type, :genre_ids, :popularity, :first_air_date, :vote_average, :vote_count, :origin_country, :character, :episodes, :seasons

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'adult': :adult,
        'backdrop_path': :backdrop_path,
        'id': :id,
        'name': :name,
        'original_language': :original_language,
        'original_name': :original_name,
        'overview': :overview,
        'poster_path': :poster_path,
        'media_type': :media_type,
        'genre_ids': :genre_ids,
        'popularity': :popularity,
        'first_air_date': :first_air_date,
        'vote_average': :vote_average,
        'vote_count': :vote_count,
        'origin_country': :origin_country,
        'character': :character,
        'episodes': :episodes,
        'seasons': :seasons
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'adult': :Object,
        'backdrop_path': :Object,
        'id': :Object,
        'name': :Object,
        'original_language': :Object,
        'original_name': :Object,
        'overview': :Object,
        'poster_path': :Object,
        'media_type': :Object,
        'genre_ids': :Object,
        'popularity': :Object,
        'first_air_date': :Object,
        'vote_average': :Object,
        'vote_count': :Object,
        'origin_country': :Object,
        'character': :Object,
        'episodes': :Object,
        'seasons': :Object
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `SwaggerClient::InlineResponse200102Media` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `SwaggerClient::InlineResponse200102Media`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.adult = attributes[:adult] if attributes.key?(:adult)

      self.backdrop_path = attributes[:backdrop_path] if attributes.key?(:backdrop_path)

      self.id = attributes[:id] if attributes.key?(:id)

      self.name = attributes[:name] if attributes.key?(:name)

      self.original_language = attributes[:original_language] if attributes.key?(:original_language)

      self.original_name = attributes[:original_name] if attributes.key?(:original_name)

      self.overview = attributes[:overview] if attributes.key?(:overview)

      self.poster_path = attributes[:poster_path] if attributes.key?(:poster_path)

      self.media_type = attributes[:media_type] if attributes.key?(:media_type)

      self.genre_ids = attributes[:genre_ids] if attributes.key?(:genre_ids)

      self.popularity = attributes[:popularity] if attributes.key?(:popularity)

      self.first_air_date = attributes[:first_air_date] if attributes.key?(:first_air_date)

      self.vote_average = attributes[:vote_average] if attributes.key?(:vote_average)

      self.vote_count = attributes[:vote_count] if attributes.key?(:vote_count)

      self.origin_country = attributes[:origin_country] if attributes.key?(:origin_country)

      self.character = attributes[:character] if attributes.key?(:character)

      self.episodes = attributes[:episodes] if attributes.key?(:episodes)

      return unless attributes.key?(:seasons)

      self.seasons = attributes[:seasons]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        adult == other.adult &&
        backdrop_path == other.backdrop_path &&
        id == other.id &&
        name == other.name &&
        original_language == other.original_language &&
        original_name == other.original_name &&
        overview == other.overview &&
        poster_path == other.poster_path &&
        media_type == other.media_type &&
        genre_ids == other.genre_ids &&
        popularity == other.popularity &&
        first_air_date == other.first_air_date &&
        vote_average == other.vote_average &&
        vote_count == other.vote_count &&
        origin_country == other.origin_country &&
        character == other.character &&
        episodes == other.episodes &&
        seasons == other.seasons
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [adult, backdrop_path, id, name, original_language, original_name, overview, poster_path, media_type, genre_ids,
       popularity, first_air_date, vote_average, vote_count, origin_country, character, episodes, seasons].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                              _deserialize(::Regexp.last_match(1), v)
                            end)
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end end
end
